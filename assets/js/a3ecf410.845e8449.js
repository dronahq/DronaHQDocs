"use strict";(self.webpackChunkdronahq_docs=self.webpackChunkdronahq_docs||[]).push([[32794],{77720:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>d});n(67294);var i=n(3905),a=n(86291);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={sidebar_position:1,title:"Visual actionflow builder"},c="Visual actionflow builder",u={unversionedId:"actionflows-on-events/visual-actionflow-builder",id:"actionflows-on-events/visual-actionflow-builder",title:"Visual actionflow builder",description:"DronaHQ provides a very unique visual experience of building actionflows on any of your app events. There are times you might want to do a sequence of actions on a button click or a value change which can get complex with data queries, API calls, logic and data transformation, branching and iterating and then ending with some visual feedback like showing a toast or a popup.",source:"@site/docs/actionflows-on-events/visual-actionflow-builder.md",sourceDirName:"actionflows-on-events",slug:"/actionflows-on-events/visual-actionflow-builder",permalink:"/actionflows-on-events/visual-actionflow-builder",draft:!1,tags:[],version:"current",lastUpdatedAt:1724759326,formattedLastUpdatedAt:"Aug 27, 2024",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Visual actionflow builder"},sidebar:"docSidebar",previous:{title:"Actionflows on events",permalink:"/category/actionflows-on-events"},next:{title:"Iterating multiple blocks",permalink:"/actionflows-on-events/iterating-multiple-blocks"}},p={},d=[{value:"Types of events",id:"types-of-events",level:2},{value:"Types of action blocks",id:"types-of-action-blocks",level:2}],f={toc:d},h="wrapper";function m(e){var{components:t}=e,n=l(e,["components"]);return(0,i.kt)(h,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){o(e,t,n[t])}))}return e}({},f,n),{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"visual-actionflow-builder"},"Visual actionflow builder"),(0,i.kt)("p",null,"DronaHQ provides a very unique visual experience of building actionflows on any of your app events. There are times you might want to do a sequence of actions on a button click or a value change which can get complex with data queries, API calls, logic and data transformation, branching and iterating and then ending with some visual feedback like showing a toast or a popup. "),(0,i.kt)("p",null,"You can access control and screen events by clicking on the lightning action on either the screen or the controls. "),(0,i.kt)("figure",null,(0,i.kt)(a.Z,{src:"/img/actionflows-on-events/button-click.png",alt:"Accessing control events",width:"100%",mdxType:"Thumbnail"}),(0,i.kt)("figcaption",{align:"center"},(0,i.kt)("i",null,"Control events"))),(0,i.kt)("figure",null,(0,i.kt)(a.Z,{src:"/img/actionflows-on-events/visual-actionflow.png",alt:"Visually build actionflows",width:"100%",mdxType:"Thumbnail"}),(0,i.kt)("figcaption",{align:"center"},(0,i.kt)("i",null,"Visual actionflow builder"))),(0,i.kt)("h2",{id:"types-of-events"},"Types of events"),(0,i.kt)("p",null,"DronaHQ has broadly 2 types of events and the rest are categorized inside these types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Screen events")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Screen_routing")," - This event fires when a routing change in the URL (For public apps) is detected. This fires before the screen_open event. Read more about it in ",(0,i.kt)("a",{parentName:"li",href:"/screen-routing"},"screen routing.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Screen_open")," - This event fires every time the screen opens. It can happen multiple times while using the app even when navigation to this screen happens. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Screen_close")," - This event is the opposite of screen_open. It fires every time you navigate away from this screen."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Control events")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Control_click")," - This events is fired on clicking the control or parts of the control."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Value_select")," - This events is generally associated with select type of controls like dropdowns or radios and is fired every time any option is selected. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Value_change")," - This event is generally associated with input type of controls like textboxes and is fired every time a value changes. You can configure the debounce time in the properties."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Focus_out")," - This event is generally associated with input type of controls like textboxes and is fired every time you focus out of the control and click outside."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Enter_press")," - This event also is generally associated with input type of controls like searchbox and is fired every time you the user presses enter. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Custom events")," - There are some custom events associated with controls like tablegrid (save_changes on table editing etc.) which let you explore the functionality of these control to the fullest. ")))),(0,i.kt)("h2",{id:"types-of-action-blocks"},"Types of action blocks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Logic and Flow Control - This segment is dedicated to actions that define the logic and flow of the application."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Javascript (JS Code) - For writing custom JavaScript code to manipulate data or control flow."),(0,i.kt)("li",{parentName:"ul"},"Branch - To create conditional branches, enabling the app to take different actions based on specific conditions."),(0,i.kt)("li",{parentName:"ul"},"Iterate - To perform iterative operations, such as looping through data sets."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"On-Screen Actions - These actions are executed directly on the screen without consuming any server-side resources."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Logic - This category includes actions where you can write logic. It contains options like Branch, Iterate, and JS Code."),(0,i.kt)("li",{parentName:"ul"},"Navigate - All actions related to navigating to different screens, apps, etc., are grouped in this category."),(0,i.kt)("li",{parentName:"ul"},"Native - This category includes actions related to mobile-specific native functionalities."),(0,i.kt)("li",{parentName:"ul"},"Dialogs - Actions related to dialogs, including toasts, confirmation pop-ups, etc., are categorized here."),(0,i.kt)("li",{parentName:"ul"},"App - All app and screen-related actions fall under this category."),(0,i.kt)("li",{parentName:"ul"},"Data and Keywords - Actions related to data and keyword manipulation are grouped here."),(0,i.kt)("li",{parentName:"ul"},"Controls - This category includes actions for control-related data manipulations and other control-specific operations."),(0,i.kt)("li",{parentName:"ul"},"Utility - All utility actions, such as downloading files, showing confetti, etc., are included in this category."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Server-Side Actions - These actions are executed on the server-side, involving resources like API calls and database queries."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"DronaHQ Services - This category includes all DronaHQ-specific services like PDF creation, in-built file upload, etc."),(0,i.kt)("li",{parentName:"ul"},"Connector",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Query - Actions related to querying data from a connected source."),(0,i.kt)("li",{parentName:"ul"},"Library - Actions for managing and utilizing pre-defined libraries.")))))),(0,i.kt)("admonition",{title:"Please Note",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"For cases where you need to insert or update into Databases or POST into an API call, you can also use the Data queries in the app builder with ",(0,i.kt)("inlineCode",{parentName:"p"},"only manual trigger")," setting and use the Action ",(0,i.kt)("inlineCode",{parentName:"p"},"Run data queries")," to fire that query on a particular action.")),(0,i.kt)("figure",null,(0,i.kt)(a.Z,{src:"/img/actionflows-on-events/on-screen.png",alt:"On screen actions",width:"100%",mdxType:"Thumbnail"}),(0,i.kt)("figcaption",{align:"center"},(0,i.kt)("i",null,"All Actions"))))}m.isMDXComponent=!0}}]);