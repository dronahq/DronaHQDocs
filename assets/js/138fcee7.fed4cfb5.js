"use strict";(self.webpackChunkdronahq_docs=self.webpackChunkdronahq_docs||[]).push([[91424],{67405:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(31984);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const l=e=>{var{to:t}=e,n=o(e,["to"]);return a.createElement(r.Z,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){i(e,t,n[t])}))}return e}({to:`${t}`},n))}},21124:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>y,frontMatter:()=>u,metadata:()=>p,toc:()=>m});n(67294);var a=n(3905),r=n(67405),i=n(86291);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const u={sidebar_position:1,title:"Sequin"},c=void 0,p={unversionedId:"reference/connectors/sequin",id:"reference/connectors/sequin",title:"Sequin",description:"Sequin is a powerful tool that enables you to harness the capabilities of SQL to seamlessly connect to external APIs.",source:"@site/docs/reference/connectors/sequin.md",sourceDirName:"reference/connectors",slug:"/reference/connectors/sequin",permalink:"/reference/connectors/sequin",draft:!1,tags:[],version:"current",lastUpdatedAt:1708585449,formattedLastUpdatedAt:"Feb 22, 2024",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Sequin"},sidebar:"docSidebar",previous:{title:"SendGrid",permalink:"/reference/connectors/sendgrid"},next:{title:"SFTP and FTP",permalink:"/reference/connectors/sftp-ftp"}},d={},m=[{value:"Configuring Sequin Sync",id:"configuring-sequin-sync",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Setup Sequin Connector in DronaHQ",id:"setup-sequin-connector-in-dronahq",level:3},{value:"General",id:"general",level:4},{value:"Admin",id:"admin",level:4},{value:"Adding Database Queries",id:"adding-database-queries",level:2},{value:"Supported Query Operations",id:"supported-query-operations",level:2},{value:"Using the Sequin Connector in DronaHQ",id:"using-the-sequin-connector-in-dronahq",level:2},{value:"Writing Back to the API",id:"writing-back-to-the-api",level:3},{value:"Error Handling",id:"error-handling",level:3}],k={toc:m},g="wrapper";function y(e){var{components:t}=e,n=s(e,["components"]);return(0,a.kt)(g,l(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){o(e,t,n[t])}))}return e}({},k,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Sequin is a powerful tool that enables you to harness the capabilities of SQL to seamlessly connect to external APIs.\nWith Sequin, you can build on top of third-party services like Salesforce or Airtable using SQL queries, providing a\nfast and efficient alternative to direct API usage."),(0,a.kt)("h2",{id:"configuring-sequin-sync"},"Configuring Sequin Sync"),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"Before you can use Sequin with DronaHQ, follow these steps to create a Sequin sync to your Postgres database:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Sign Up for Sequin:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Start by signing up for Sequin ",(0,a.kt)("a",{parentName:"li",href:"https://app.sequin.io"},"here"),"."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Connect to the API:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Once you've signed up, connect Sequin to the API you want to sync. This is the external API you'll be working with."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Configure Schema:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Configure your schema by selecting the specific tables and columns you want to sync from the API."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Database Connection:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Sequin will prompt you to connect to your Postgres database. You can also opt to use a free demo Postgres instance\nhosted by Sequin.")))),(0,a.kt)("figure",null,(0,a.kt)(i.Z,{src:"/img/reference/connectors/sequin/image5.png",alt:"Connection details",mdxType:"Thumbnail"}),(0,a.kt)("figcaption",{align:"center"},(0,a.kt)("i",null,"Connection details"))),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Initiate Sync:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Click ",(0,a.kt)("inlineCode",{parentName:"li"},"Create")," to initiate the synchronization process. Sequin will start syncing your data in real-time."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Connection Instructions:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Sequin will provide you with connection instructions for your Postgres database. Keep this information accessible,\nas you'll need it to configure DronaHQ.")))),(0,a.kt)("p",null,"For more detailed guidance on setting up a Sequin sync, refer to this\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.sequin.io/getting-started#create-a-sync"},"guide"),"."),(0,a.kt)("h3",{id:"setup-sequin-connector-in-dronahq"},"Setup Sequin Connector in DronaHQ"),(0,a.kt)("p",null,"Sequin uses a ",(0,a.kt)("a",{parentName:"p",href:"https://docs.sequin.io/writes#configuration"},"Postgres Proxy")," to interface with your Sequin-synced tables.\nThe Proxy lets Sequin capture inserts, updates, and deletes you make in your database and commit them to the API."),(0,a.kt)("p",null,"To add Sequin's Postgres Proxy as a DronaHQ connector, you can treat it as a regular Postgres resource and enter the\nconnection details in the connector configuration:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Access your DronaHQ dashboard and navigate to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Connectors")," section.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Click ",(0,a.kt)("inlineCode",{parentName:"p"},"+ Add Connector")," and select ",(0,a.kt)("inlineCode",{parentName:"p"},"PostgreSQL Connector."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Provide a name for the connector and paste the connection string from your Sequin dashboard.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Under ",(0,a.kt)("inlineCode",{parentName:"p"},"Connection Options,")," enable ",(0,a.kt)("inlineCode",{parentName:"p"},"Enable converting queries to prepared statements")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Connect using SSL")," for\nefficient and secure database access.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Test the connection to ensure it's working correctly, then click ",(0,a.kt)("inlineCode",{parentName:"p"},"Save.")))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"DronaHQ can Auto fill crucial connection values like host, name, password, and more from the connector's\n",(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING"},"connection string")," or from a AWS IAM\ncredentials using ",(0,a.kt)("a",{parentName:"p",href:"/datasource-concepts/aws-import"},"AWS Import"),". ")),(0,a.kt)("h4",{id:"general"},"General"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Field"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Host"),(0,a.kt)("td",{parentName:"tr",align:null},"Enter the Host Domain or IP")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Port"),(0,a.kt)("td",{parentName:"tr",align:null},"Enter the Port number")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Database Name"),(0,a.kt)("td",{parentName:"tr",align:null},"Enter the Database name")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Authentication Type"),(0,a.kt)("td",{parentName:"tr",align:null},"Choose from User and Password or AWS IAM")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Username"),(0,a.kt)("td",{parentName:"tr",align:null},"Enter the Username")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Password"),(0,a.kt)("td",{parentName:"tr",align:null},"Enter the Password")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"AWS Access Key"),(0,a.kt)("td",{parentName:"tr",align:null},"Enter the AWS Access Key of your database.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"AWS Secret Key"),(0,a.kt)("td",{parentName:"tr",align:null},"Enter the AWS Secret Key of your database.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"AWS Region"),(0,a.kt)("td",{parentName:"tr",align:null},"Enter the AWS Region of your database.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Role to assume (ARN)"),(0,a.kt)("td",{parentName:"tr",align:null},"Enter the role to be used while accessing API. Example - ",(0,a.kt)("inlineCode",{parentName:"td"},"arn:aws:iam::123456789012:role/RoleName"))))),(0,a.kt)("figure",null,(0,a.kt)(i.Z,{src:"/img/reference/connectors/postgresql/details.png",alt:"PostgreSQL with Sample details.",mdxType:"Thumbnail"}),(0,a.kt)("figcaption",{align:"center"},(0,a.kt)("i",null,"PostgreSQL with Sample details."))),(0,a.kt)("h4",{id:"admin"},"Admin"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Advanced Option"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Connection Options"),(0,a.kt)("td",{parentName:"tr",align:null},"The ",(0,a.kt)("inlineCode",{parentName:"td"},"key")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"value")," connection options in database configuration refer to specific settings (keys) and their corresponding values that dictate how the application connects to the database")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Use Dynamic Database Host"),(0,a.kt)("td",{parentName:"tr",align:null},"Dynamically determine the host for the database connection.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Use Dynamic Database Name"),(0,a.kt)("td",{parentName:"tr",align:null},"Set the database name dynamically, allowing easy switching between databases.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)(r.Z,{to:"/datasource-concepts/dynamic-credentials/#configure-dynamic-credentials",mdxType:"VersionedLink"}," Use Dynamic Database Credentials ")),(0,a.kt)("td",{parentName:"tr",align:null},"Enable dynamic database credentials for secure and convenient management.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)(r.Z,{to:"/datasource-concepts/prepared-statements/",mdxType:"VersionedLink"}," Enable Converting Queries to Prepared Statement ")),(0,a.kt)("td",{parentName:"tr",align:null},"Opt for prepared statements to enhance database performance and security.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)(r.Z,{to:"/datasource-concepts/ssl-configurations/",mdxType:"VersionedLink"}," Connect using SSL ")),(0,a.kt)("td",{parentName:"tr",align:null},"Securely access the database using an encrypted SSL connection, ensuring data integrity and confidentiality.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)(r.Z,{to:"/datasource-concepts/ssh-tunneling/",mdxType:"VersionedLink"}," Enable SSH Tunneling ")),(0,a.kt)("td",{parentName:"tr",align:null},"Securely access the database through encrypted SSH tunneling.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)(r.Z,{to:"/datasource-concepts/whitelisting-dronahq-ip/",mdxType:"VersionedLink"}," Whitelist IP ")),(0,a.kt)("td",{parentName:"tr",align:null},"Enhance security by restricting database access to specific whitelisted IP addresses.")))),(0,a.kt)("h2",{id:"adding-database-queries"},"Adding Database Queries"),(0,a.kt)("p",null,"After configuring the connector, access it in your Connector Library. To add queries, click ",(0,a.kt)("inlineCode",{parentName:"p"},"Add query")," once the\nconnection is ready. Create simple or complex queries, view tables and fields. Input Query name, run the query, and see\nresults in Response."),(0,a.kt)("figure",null,(0,a.kt)(i.Z,{src:"/img/reference/connectors/postgresql/data-query.jpeg",alt:"Write Queries",mdxType:"Thumbnail"}),(0,a.kt)("figcaption",{align:"center"},(0,a.kt)("i",null,"Write Queries"))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Use double curly brackets for dynamic variables. Test with sample values before saving. Link dynamic variables to\ncontrols/actions and more for runtime use.")),(0,a.kt)("p",null,"Saved queries appear under your connector in Connector Library."),(0,a.kt)("figure",null,(0,a.kt)(i.Z,{src:"/img/reference/connectors/postgresql/queries.jpeg",alt:"Added Queries",mdxType:"Thumbnail"}),(0,a.kt)("figcaption",{align:"center"},(0,a.kt)("i",null,"Added Queries"))),(0,a.kt)("h2",{id:"supported-query-operations"},"Supported Query Operations"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Operations"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Raw SQL Query"),(0,a.kt)("td",{parentName:"tr",align:null},"Various ",(0,a.kt)("inlineCode",{parentName:"td"},"select, insert, delete, update, join")," operations which are supported by PostgresSQL query. e.g. - ",(0,a.kt)("inlineCode",{parentName:"td"},"select * from UserInfo;"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Stored Procedure Call"),(0,a.kt)("td",{parentName:"tr",align:null},"You can call store procedure similar to that we call from workbench. e.g. - ",(0,a.kt)("inlineCode",{parentName:"td"},"CALL getUserInfo;"))))),(0,a.kt)("h2",{id:"using-the-sequin-connector-in-dronahq"},"Using the Sequin Connector in DronaHQ"),(0,a.kt)("p",null,"With Sequin syncing your API data to your database, you can now query this data within your DronaHQ app. Here's how to\ndo it:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"From your DronaHQ dashboard, access your app.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In the left rail, click on ",(0,a.kt)("inlineCode",{parentName:"p"},"Data Queries")," (the database icon), then click ",(0,a.kt)("inlineCode",{parentName:"p"},"+ New")," and select ",(0,a.kt)("inlineCode",{parentName:"p"},"Connector Query."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Choose the Sequin Postgres Proxy connection as the connector.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Compose your SQL query using the schema for your Sequin-synced tables available on the right rail.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Click ",(0,a.kt)("inlineCode",{parentName:"p"},"Test")," to ensure your query runs as expected."))),(0,a.kt)("p",null,"Here's an example Salesforce query that retrieves Salesforce Contacts belonging to a specific account:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"select * from salesforce.contact\n-- use a query variable, {{account_id}}\nwhere account_id = '{{account_id}}'\nlimit 100;\n")),(0,a.kt)("h3",{id:"writing-back-to-the-api"},"Writing Back to the API"),(0,a.kt)("p",null,"Sequin allows you to perform ",(0,a.kt)("a",{parentName:"p",href:"https://docs.sequin.io/writes"},"mutations")," via your database, which are then applied to the\nexternal API. In DronaHQ, you can use custom-built or auto-generated forms to insert or update data in your\nSequin-synced tables."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a form with input fields matching your Sequin-synced table columns.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Connect the ",(0,a.kt)("inlineCode",{parentName:"p"},"Submit")," button of your form to a database mutation query in DronaHQ.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Configure the insert query by populating ",(0,a.kt)("inlineCode",{parentName:"p"},"values")," with input field values from your form."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"insert into salesforce.contact (first_name, last_name, email)\nvalues ('{{first_name}}', '{{last_name}}', '{{email}}');\n")),(0,a.kt)("figure",null,(0,a.kt)(i.Z,{src:"/img/reference/connectors/sequin/image3.png",alt:"Inserting Contact",mdxType:"Thumbnail"}),(0,a.kt)("figcaption",{align:"center"},(0,a.kt)("i",null,"Inserting Contact"))),(0,a.kt)("h3",{id:"error-handling"},"Error Handling"),(0,a.kt)("p",null,"In case Sequin encounters an error while applying a mutation to the upstream API, it returns a standard Postgres error.\nYou can configure your app to display this error as an alert notification."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"In the event of an error, configure an ",(0,a.kt)("inlineCode",{parentName:"li"},"On-Screen Action")," (e.g., Toast) to display the error message.")),(0,a.kt)("figure",null,(0,a.kt)(i.Z,{src:"/img/reference/connectors/sequin/image1.png",alt:"Toast Config for error",mdxType:"Thumbnail"}),(0,a.kt)("figcaption",{align:"center"},(0,a.kt)("i",null,"Toast Config for error"))),(0,a.kt)("p",null,"With Sequin, you can seamlessly integrate third-party services into your DronaHQ app using SQL, making data management\nand utilization efficient and straightforward."),(0,a.kt)("p",null,"For more details on writing queries and understanding how Sequin works, refer to their\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.sequin.io/"},"documentation"),"."))}y.isMDXComponent=!0}}]);