"use strict";(self.webpackChunkdronahq_docs=self.webpackChunkdronahq_docs||[]).push([[44244],{44082:(e,l,a)=>{a.r(l),a.d(l,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>u,metadata:()=>d,toc:()=>p});a(67294);var t=a(3905);function n(e,l,a){return l in e?Object.defineProperty(e,l,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[l]=a,e}function r(e,l){return l=null!=l?l:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):function(e,l){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);l&&(t=t.filter((function(l){return Object.getOwnPropertyDescriptor(e,l).enumerable}))),a.push.apply(a,t)}return a}(Object(l)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(l,a))})),e}function s(e,l){if(null==e)return{};var a,t,n=function(e,l){if(null==e)return{};var a,t,n={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],l.indexOf(a)>=0||(n[a]=e[a]);return n}(e,l);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],l.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}const u={sidebar_position:5},i="DQL function reference",d={unversionedId:"reference/dronahq-query-language/dql-function-reference",id:"reference/dronahq-query-language/dql-function-reference",title:"DQL function reference",description:"DQL function reference",source:"@site/docs/reference/dronahq-query-language/dql-function-reference.md",sourceDirName:"reference/dronahq-query-language",slug:"/reference/dronahq-query-language/dql-function-reference",permalink:"/reference/dronahq-query-language/dql-function-reference",draft:!1,tags:[],version:"current",lastUpdatedAt:1706882289,formattedLastUpdatedAt:"Feb 2, 2024",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docSidebar",previous:{title:"Manipulating data",permalink:"/reference/dronahq-query-language/manipulating-data"},next:{title:"Keywords and JS Utilities",permalink:"/category/keywords-and-js-utilities"}},o={},p=[{value:"Contents",id:"contents",level:2},{value:"General functions",id:"general-functions",level:2},{value:"assert",id:"assert",level:3},{value:"DQL",id:"dql",level:5},{value:"Result",id:"result",level:5},{value:"average",id:"average",level:3},{value:"DQL",id:"dql-1",level:5},{value:"Result",id:"result-1",level:5},{value:"boolean",id:"boolean",level:3},{value:"DQL",id:"dql-2",level:5},{value:"Result",id:"result-2",level:5},{value:"contains",id:"contains",level:3},{value:"DQL",id:"dql-3",level:5},{value:"Result",id:"result-3",level:5},{value:"decodeUrl",id:"decodeurl",level:3},{value:"DQL",id:"dql-4",level:5},{value:"Result",id:"result-4",level:5},{value:"decodeUrlComponent",id:"decodeurlcomponent",level:3},{value:"DQL",id:"dql-5",level:5},{value:"Result",id:"result-5",level:5},{value:"each",id:"each",level:3},{value:"DQL",id:"dql-6",level:5},{value:"Result",id:"result-6",level:5},{value:"encodeUrl",id:"encodeurl",level:3},{value:"DQL",id:"dql-7",level:5},{value:"Result",id:"result-7",level:5},{value:"encodeUrlComponent",id:"encodeurlcomponent",level:3},{value:"DQL",id:"dql-8",level:5},{value:"Result",id:"result-8",level:5},{value:"eval",id:"eval",level:3},{value:"DQL",id:"dql-9",level:5},{value:"Result",id:"result-9",level:5},{value:"exists",id:"exists",level:3},{value:"DQL",id:"dql-10",level:5},{value:"Result",id:"result-10",level:5},{value:"filter",id:"filter",level:3},{value:"DQL",id:"dql-11",level:5},{value:"Result",id:"result-11",level:5},{value:"join",id:"join",level:3},{value:"DQL",id:"dql-12",level:5},{value:"Result",id:"result-12",level:5},{value:"json",id:"json",level:3},{value:"DQL",id:"dql-13",level:5},{value:"Result",id:"result-13",level:5},{value:"jsonParse",id:"jsonparse",level:3},{value:"DQL",id:"dql-14",level:5},{value:"Result",id:"result-14",level:5},{value:"keys",id:"keys",level:3},{value:"DQL",id:"dql-15",level:5},{value:"Result",id:"result-15",level:5},{value:"length",id:"length",level:3},{value:"DQL",id:"dql-16",level:5},{value:"Result",id:"result-16",level:5},{value:"lookup",id:"lookup",level:3},{value:"DQL",id:"dql-17",level:5},{value:"Result",id:"result-17",level:5},{value:"lowercase",id:"lowercase",level:3},{value:"DQL",id:"dql-18",level:5},{value:"Result",id:"result-18",level:5},{value:"map",id:"map",level:3},{value:"DQL",id:"dql-19",level:5},{value:"Result",id:"result-19",level:5},{value:"max",id:"max",level:3},{value:"DQL",id:"dql-20",level:5},{value:"Result",id:"result-20",level:5},{value:"match",id:"match",level:3},{value:"DQL",id:"dql-21",level:5},{value:"Result",id:"result-21",level:5},{value:"merge",id:"merge",level:3},{value:"DQL",id:"dql-22",level:5},{value:"Result",id:"result-22",level:5},{value:"not",id:"not",level:3},{value:"DQL",id:"dql-23",level:5},{value:"Result",id:"result-23",level:5},{value:"pad",id:"pad",level:3},{value:"DQL",id:"dql-24",level:5},{value:"Result",id:"result-24",level:5},{value:"partition",id:"partition",level:3},{value:"DQL",id:"dql-25",level:5},{value:"Result",id:"result-25",level:5},{value:"replace",id:"replace",level:3},{value:"DQL",id:"dql-26",level:5},{value:"Result",id:"result-26",level:5},{value:"reduce",id:"reduce",level:3},{value:"DQL",id:"dql-27",level:5},{value:"Result",id:"result-27",level:5},{value:"split",id:"split",level:3},{value:"DQL",id:"dql-28",level:5},{value:"Result",id:"result-28",level:5},{value:"spread",id:"spread",level:3},{value:"DQL",id:"dql-29",level:5},{value:"Result",id:"result-29",level:5},{value:"string",id:"string",level:3},{value:"DQL",id:"dql-30",level:5},{value:"Result",id:"result-30",level:5},{value:"substring",id:"substring",level:3},{value:"DQL",id:"dql-31",level:5},{value:"Result",id:"result-31",level:5},{value:"substringAfter",id:"substringafter",level:3},{value:"DQL",id:"dql-32",level:5},{value:"Result",id:"result-32",level:5},{value:"substringBefore",id:"substringbefore",level:3},{value:"DQL",id:"dql-33",level:5},{value:"Result",id:"result-33",level:5},{value:"sum",id:"sum",level:3},{value:"DQL",id:"dql-34",level:5},{value:"Result",id:"result-34",level:5},{value:"trim",id:"trim",level:3},{value:"DQL",id:"dql-35",level:5},{value:"Result",id:"result-35",level:5},{value:"type",id:"type",level:3},{value:"DQL",id:"dql-36",level:5},{value:"Result",id:"result-36",level:5},{value:"uppercase",id:"uppercase",level:3},{value:"DQL",id:"dql-37",level:5},{value:"Result",id:"result-37",level:5},{value:"uuid",id:"uuid",level:3},{value:"DQL",id:"dql-38",level:5},{value:"Result",id:"result-38",level:5},{value:"Array functions",id:"array-functions",level:2},{value:"append",id:"append",level:3},{value:"DQL",id:"dql-39",level:5},{value:"Result",id:"result-39",level:5},{value:"count",id:"count",level:3},{value:"DQL",id:"dql-40",level:5},{value:"Result",id:"result-40",level:5},{value:"distinct",id:"distinct",level:3},{value:"DQL",id:"dql-41",level:5},{value:"Result",id:"result-41",level:5},{value:"reverse",id:"reverse",level:3},{value:"DQL",id:"dql-42",level:5},{value:"Result",id:"result-42",level:5},{value:"shuffle",id:"shuffle",level:3},{value:"DQL",id:"dql-43",level:5},{value:"Result",id:"result-43",level:5},{value:"sort",id:"sort",level:3},{value:"DQL",id:"dql-44",level:5},{value:"Result",id:"result-44",level:5},{value:"zip",id:"zip",level:3},{value:"DQL",id:"dql-45",level:5},{value:"Result",id:"result-45",level:5},{value:"Numeric functions",id:"numeric-functions",level:2},{value:"abs",id:"abs",level:3},{value:"DQL",id:"dql-46",level:5},{value:"Result",id:"result-46",level:5},{value:"acos",id:"acos",level:3},{value:"DQL",id:"dql-47",level:5},{value:"Result",id:"result-47",level:5},{value:"acosh",id:"acosh",level:3},{value:"DQL",id:"dql-48",level:5},{value:"Result",id:"result-48",level:5},{value:"asin",id:"asin",level:3},{value:"DQL",id:"dql-49",level:5},{value:"Result",id:"result-49",level:5},{value:"asinh",id:"asinh",level:3},{value:"DQL",id:"dql-50",level:5},{value:"Result",id:"result-50",level:5},{value:"atan",id:"atan",level:3},{value:"DQL",id:"dql-51",level:5},{value:"Result",id:"result-51",level:5},{value:"atanh",id:"atanh",level:3},{value:"DQL",id:"dql-52",level:5},{value:"Result",id:"result-52",level:5},{value:"atan2",id:"atan2",level:3},{value:"DQL",id:"dql-53",level:5},{value:"Result",id:"result-53",level:5},{value:"cbrt",id:"cbrt",level:3},{value:"DQL",id:"dql-54",level:5},{value:"Result",id:"result-54",level:5},{value:"ceil",id:"ceil",level:3},{value:"DQL",id:"dql-55",level:5},{value:"Result",id:"result-55",level:5},{value:"constant",id:"constant",level:3},{value:"DQL",id:"dql-56",level:5},{value:"Result",id:"result-56",level:5},{value:"cos",id:"cos",level:3},{value:"DQL",id:"dql-57",level:5},{value:"Result",id:"result-57",level:5},{value:"cosh",id:"cosh",level:3},{value:"DQL",id:"dql-58",level:5},{value:"Result",id:"result-58",level:5},{value:"exp",id:"exp",level:3},{value:"DQL",id:"dql-59",level:5},{value:"Result",id:"result-59",level:5},{value:"floor",id:"floor",level:3},{value:"DQL",id:"dql-60",level:5},{value:"Result",id:"result-60",level:5},{value:"formatBase",id:"formatbase",level:3},{value:"DQL",id:"dql-61",level:5},{value:"Result",id:"result-61",level:5},{value:"isFinite",id:"isfinite",level:3},{value:"DQL",id:"dql-62",level:5},{value:"Result",id:"result-62",level:5},{value:"log",id:"log",level:3},{value:"DQL",id:"dql-63",level:5},{value:"Result",id:"result-63",level:5},{value:"log10",id:"log10",level:3},{value:"DQL",id:"dql-64",level:5},{value:"Result",id:"result-64",level:5},{value:"log2",id:"log2",level:3},{value:"DQL",id:"dql-65",level:5},{value:"Result",id:"result-65",level:5},{value:"number",id:"number",level:3},{value:"DQL",id:"dql-66",level:5},{value:"Result",id:"result-66",level:5},{value:"power",id:"power",level:3},{value:"DQL",id:"dql-67",level:5},{value:"Result",id:"result-67",level:5},{value:"round",id:"round",level:3},{value:"DQL",id:"dql-68",level:5},{value:"Result",id:"result-68",level:5},{value:"sin",id:"sin",level:3},{value:"DQL",id:"dql-69",level:5},{value:"Result",id:"result-69",level:5},{value:"sinh",id:"sinh",level:3},{value:"DQL",id:"dql-70",level:5},{value:"Result",id:"result-70",level:5},{value:"sqrt",id:"sqrt",level:3},{value:"DQL",id:"dql-71",level:5},{value:"Result",id:"result-71",level:5},{value:"tan",id:"tan",level:3},{value:"DQL",id:"dql-72",level:5},{value:"Result",id:"result-72",level:5},{value:"tanh",id:"tanh",level:3},{value:"DQL",id:"dql-73",level:5},{value:"Result",id:"result-73",level:5},{value:"Date and time functions",id:"date-and-time-functions",level:2},{value:"afterDate",id:"afterdate",level:3},{value:"DQL",id:"dql-74",level:5},{value:"Result",id:"result-74",level:5},{value:"beforeDate",id:"beforedate",level:3},{value:"DQL",id:"dql-75",level:5},{value:"Result",id:"result-75",level:5},{value:"dateEquals",id:"dateequals",level:3},{value:"DQL",id:"dql-76",level:5},{value:"Result",id:"result-76",level:5},{value:"datePlus",id:"dateplus",level:3},{value:"DQL",id:"dql-77",level:5},{value:"Result",id:"result-77",level:5},{value:"day",id:"day",level:3},{value:"DQL",id:"dql-78",level:5},{value:"Result",id:"result-78",level:5},{value:"dayOfTheWeek",id:"dayoftheweek",level:3},{value:"DQL",id:"dql-79",level:5},{value:"Result",id:"result-79",level:5},{value:"diffDate",id:"diffdate",level:3},{value:"DQL",id:"dql-80",level:5},{value:"Result",id:"result-80",level:5},{value:"fromMillis",id:"frommillis",level:3},{value:"DQL",id:"dql-81",level:5},{value:"Result",id:"result-81",level:5},{value:"hasSameDate",id:"hassamedate",level:3},{value:"DQL",id:"dql-82",level:5},{value:"Result",id:"result-82",level:5},{value:"hours",id:"hours",level:3},{value:"DQL",id:"dql-83",level:5},{value:"Result",id:"result-83",level:5},{value:"milliSeconds",id:"milliseconds",level:3},{value:"DQL",id:"dql-84",level:5},{value:"Result",id:"result-84",level:5},{value:"minutes",id:"minutes",level:3},{value:"DQL",id:"dql-85",level:5},{value:"Result",id:"result-85",level:5},{value:"month",id:"month",level:3},{value:"DQL",id:"dql-86",level:5},{value:"Result",id:"result-86",level:5},{value:"seconds",id:"seconds",level:3},{value:"DQL",id:"dql-87",level:5},{value:"Result",id:"result-87",level:5},{value:"toMillis",id:"tomillis",level:3},{value:"DQL",id:"dql-88",level:5},{value:"Result",id:"result-88",level:5},{value:"year",id:"year",level:3},{value:"DQL",id:"dql-89",level:5},{value:"Result",id:"result-89",level:5}],m={toc:p},c="wrapper";function h(e){var{components:l}=e,a=s(e,["components"]);return(0,t.kt)(c,r(function(e){for(var l=1;l<arguments.length;l++){var a=null!=arguments[l]?arguments[l]:{},t=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),t.forEach((function(l){n(e,l,a[l])}))}return e}({},m,a),{components:l,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"dql-function-reference"},"DQL function reference"),(0,t.kt)("p",null,"DQL function reference"),(0,t.kt)("p",null,"All DronaHQ Query Language (DQL) functions are documented below."),(0,t.kt)("h2",{id:"contents"},"Contents"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#general-functions"},"General functions")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#array-functions"},"Array functions")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#numeric-functions"},"Numeric functions")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#date-and-time-functions"},"Date and time functions"))),(0,t.kt)("h2",{id:"general-functions"},"General functions"),(0,t.kt)("h3",{id:"assert"},"assert"),(0,t.kt)("p",null,"Throws an error with the message if a condition is false."),(0,t.kt)("h5",{id:"dql"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$assert($cond: bool, $msg: string) => error\n")),(0,t.kt)("h5",{id:"result"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$assert(user.age < 18,"error: user cannot vote!")\n')),(0,t.kt)("h3",{id:"average"},"average"),(0,t.kt)("p",null,"Returns the average value of a numeric array."),(0,t.kt)("h5",{id:"dql-1"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$average($array: array(num)) => number\n")),(0,t.kt)("h5",{id:"result-1"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$average([1,2,3,4,5]) -> 3\n")),(0,t.kt)("h3",{id:"boolean"},"boolean"),(0,t.kt)("p",null,"Casts an argument to its effective boolean value."),(0,t.kt)("h5",{id:"dql-2"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$boolean($arg: any) => bool\n")),(0,t.kt)("h5",{id:"result-2"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$boolean(0) ->  false\n$boolean(10) ->  true\n$boolean("") ->  false\n$boolean("abc") ->  true\n')),(0,t.kt)("h3",{id:"contains"},"contains"),(0,t.kt)("p",null,"Returns true if a string contains a pattern."),(0,t.kt)("h5",{id:"dql-3"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$contains($str: string, $pattern: string | regex) => bool\n")),(0,t.kt)("h5",{id:"result-3"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$contains("hello, world", "lo") -> true\n$contains("hello world", "ab") -> false\n')),(0,t.kt)("h3",{id:"decodeurl"},"decodeUrl"),(0,t.kt)("p",null,"Decodes a string from a URL."),(0,t.kt)("h5",{id:"dql-4"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$decodeUrl($val: string) => string\n")),(0,t.kt)("h5",{id:"result-4"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$decodeUrl("https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B") -> "https://mozilla.org/?x=\u0448\u0435\u043b\u043b\u044b"\n')),(0,t.kt)("h3",{id:"decodeurlcomponent"},"decodeUrlComponent"),(0,t.kt)("p",null,"Decodes a string from a component previously created with encodeUrlComponent."),(0,t.kt)("h5",{id:"dql-5"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$decodeUrlComponent($val: string) => string\n")),(0,t.kt)("h5",{id:"result-5"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$decodeUrlComponent("%3Fx%3Dtest") -> "?x=test"\n')),(0,t.kt)("h3",{id:"each"},"each"),(0,t.kt)("p",null,"Applies a function to each key/value pair of an object."),(0,t.kt)("h5",{id:"dql-6"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$each($obj: object, func: ($val, $key) : any)\n")),(0,t.kt)("h5",{id:"result-6"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-string"},'"Address": {\n    "Street": "Hursley Park",\n    "City": "Winchester",\n    "Postcode": "SO21 2JN"\n}\n$each(Address, fn($v, $k) {$k & ": " & $v}) ->\n[\n        "Street: Hursley Park",\n        "City: Winchester",\n        "Postcode: SO21 2JN"\n]\n')),(0,t.kt)("h3",{id:"encodeurl"},"encodeUrl"),(0,t.kt)("p",null,"Encodes a value into a URL."),(0,t.kt)("h5",{id:"dql-7"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$encodeUrl($val: string) => string\n")),(0,t.kt)("h5",{id:"result-7"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$encodeUrl("https://mozilla.org/?x=\u0448\u0435\u043b\u043b\u044b") -> "https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B"\n')),(0,t.kt)("h3",{id:"encodeurlcomponent"},"encodeUrlComponent"),(0,t.kt)("p",null,"Encodes a value into a component for a URL."),(0,t.kt)("h5",{id:"dql-8"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$encodeUrlComponent($val: string) => string\n")),(0,t.kt)("h5",{id:"result-8"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$encodeUrlComponent("?x=test") -> "%3Fx%3Dtest"\n')),(0,t.kt)("h3",{id:"eval"},"eval"),(0,t.kt)("p",null,"Evaluates an expression."),(0,t.kt)("h5",{id:"dql-9"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$eval($val:string) => any\n")),(0,t.kt)("h5",{id:"result-9"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$eval("[1,$string(2),3]") -> [1,"2",3]\n')),(0,t.kt)("h3",{id:"exists"},"exists"),(0,t.kt)("p",null,"Returns true if a value is not null or undefined."),(0,t.kt)("h5",{id:"dql-10"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$exists($val: any) => bool\n")),(0,t.kt)("h5",{id:"result-10"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$exists("hello") -> true\n$exists([1,2,3]) -> true\n$exists("a" : 1, "b": 2) -> true\n$exists(null) -> false\n$exists(blah) -> false\n')),(0,t.kt)("h3",{id:"filter"},"filter"),(0,t.kt)("p",null,"Returns an array of elements which satisfy the predicate defined in a function."),(0,t.kt)("h5",{id:"dql-11"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$filter($arr: array, $func: ($e, $index?: number?, $ar: array )=> boolean) => array\n")),(0,t.kt)("h5",{id:"result-11"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$filter([1,2,3,4,5], fn($e){ '$e>3'}) -> [4, 5]\n")),(0,t.kt)("h3",{id:"join"},"join"),(0,t.kt)("p",null,"Joins the elements of an array into a string using the optional separator string."),(0,t.kt)("h5",{id:"dql-12"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$join($arr: array, $separator?: string) => string\n")),(0,t.kt)("h5",{id:"result-12"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$join(["hello", "world"]) -> "helloworld"\n$join(["hello", "world"], "-") \u2192 "hello-world"\n$join([1,2,3], "..") -> "1..2..3"\n')),(0,t.kt)("h3",{id:"json"},"json"),(0,t.kt)("p",null,"Converts an object to a JSON string."),(0,t.kt)("h5",{id:"dql-13"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$json($val:any) => string\n")),(0,t.kt)("h5",{id:"result-13"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'>$json({"a": 1, "b" : "hello"}) -> {"a":1,"b":"hello"}\n')),(0,t.kt)("h3",{id:"jsonparse"},"jsonParse"),(0,t.kt)("p",null,"Parses a JSON string into an object."),(0,t.kt)("h5",{id:"dql-14"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$jsonParse($val:string) => object\n")),(0,t.kt)("h5",{id:"result-14"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'$jsonParse(\'{"one": 1, "two": [3, "four"]}\') -> {"one": 1,"two": [ 3,"four"]}\n')),(0,t.kt)("h3",{id:"keys"},"keys"),(0,t.kt)("p",null,"Returns an array of the keys in an object."),(0,t.kt)("h5",{id:"dql-15"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$keys($obj: object) => array\n")),(0,t.kt)("h5",{id:"result-15"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'"Product": [\n    {\n        "Product Name": "Bowler Hat",\n        "ProductID": 858383,\n        "SKU": "0406654608",\n        "Description": {\n            "Colour": "Purple",\n            "Width": 300,\n            "Height": 200,\n            "Depth": 210,\n            "Weight": 0.75\n        },\n        "Price": 34.45,\n        "Quantity": 2\n    }\n]\n$keys(Product) -> ["Product Name", "ProductID", "SKU", "Description", "Price", "Quantity"]\n\n')),(0,t.kt)("h3",{id:"length"},"length"),(0,t.kt)("p",null,"Returns the length of a string."),(0,t.kt)("h5",{id:"dql-16"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$length($str: string) => number\n")),(0,t.kt)("h5",{id:"result-16"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$length("abc") -> 3\n$length("") -> 0\n')),(0,t.kt)("h3",{id:"lookup"},"lookup"),(0,t.kt)("p",null,"Returns the value of a key in an object."),(0,t.kt)("h5",{id:"dql-17"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$lookup($obj: object, $key: string) => any\n")),(0,t.kt)("h5",{id:"result-17"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'($o := { "name" : "John", "email": "john@gmail.com"}; $lookup($o, "name")) -> "John"\n')),(0,t.kt)("h3",{id:"lowercase"},"lowercase"),(0,t.kt)("p",null,"Returns the lowercase version of a string."),(0,t.kt)("h5",{id:"dql-18"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$lowercase($str: string) => string\n")),(0,t.kt)("h5",{id:"result-18"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$lowercase("Hello World") -> "hello world"\n')),(0,t.kt)("h3",{id:"map"},"map"),(0,t.kt)("p",null,"Maps each element of an array using a function and returns a new array with all the mapped elements."),(0,t.kt)("h5",{id:"dql-19"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$map($arr: array, $func: ($e, $index?: number?, $ar: array )) : array\n")),(0,t.kt)("h5",{id:"result-19"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"$map([1,2,3,4,5], fn($e){ $e *2}) -> [2,4,6,8,10]\n")),(0,t.kt)("h3",{id:"max"},"max"),(0,t.kt)("p",null,"Returns the maximum value from a numeric array."),(0,t.kt)("h5",{id:"dql-20"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$max($array) => number\n")),(0,t.kt)("h5",{id:"result-20"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$max([9,2,17,3]) -> 17\n")),(0,t.kt)("h3",{id:"match"},"match"),(0,t.kt)("p",null,"Returns an array of strings that match a pattern."),(0,t.kt)("h5",{id:"dql-21"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$match($str: string, $pattern: string | regex) => array\n")),(0,t.kt)("h5",{id:"result-21"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$match("ababbabbbcc",/a(b+)/) -> ["ab", "abb", "abbb"]\n')),(0,t.kt)("h3",{id:"merge"},"merge"),(0,t.kt)("p",null,"Returns a new object with the properties of each object in an array of objects merged into it."),(0,t.kt)("h5",{id:"dql-22"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$merge($arr: array) => object\n")),(0,t.kt)("h5",{id:"result-22"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'$merge([{"a":1},{"b":2}]) -> {"a": 1,"b": 2}\n')),(0,t.kt)("h3",{id:"not"},"not"),(0,t.kt)("p",null,"Returns true if a value is false, or false otherwise"),(0,t.kt)("h5",{id:"dql-23"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$not($x: any) => bool\n")),(0,t.kt)("h5",{id:"result-23"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$not(true) -> false\n$not(false) -> true\n$not(null) -> true\n$not(0) -> true\n$not(100) -> false\n$not("") -> true\n$not("hello") -> false\n')),(0,t.kt)("h3",{id:"pad"},"pad"),(0,t.kt)("p",null,"Returns a copy of a string padded to a length with $pad (if provided)."),(0,t.kt)("h5",{id:"dql-24"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$pad($str: string, $length: number, $pad?: string) => string\n")),(0,t.kt)("h5",{id:"result-24"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$pad("example", 5) -> "example  "\n$pad("example", 5, "-") -> "example--"\n')),(0,t.kt)("h3",{id:"partition"},"partition"),(0,t.kt)("p",null,"Partitions an array into an array of arrays of size $n."),(0,t.kt)("h5",{id:"dql-25"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$partition($array:any, $n: numbers) => array\n")),(0,t.kt)("h5",{id:"result-25"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$partition([1,2,3,4,5,6,7,8,9,10], 2) -> [[1,2], [3,4], [5,6], [7,8], [9,10]]\n$partition([1,2,3,4,5,6,7,8,9,10], 3) -> [[1,2,3], [4,5,6], [7,8,9], [10]]\n")),(0,t.kt)("h3",{id:"replace"},"replace"),(0,t.kt)("p",null,"Returns a string with all occurrences of a pattern replaced by a replacement string."),(0,t.kt)("h5",{id:"dql-26"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$replace($str: string, $pattern: string | regex, $replacement: string) => string\n")),(0,t.kt)("h5",{id:"result-26"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$replace("Hello World", "World", "Everyone") -> "Hello Everyone"\n$replace("the cat sat on the mat", "at", "it") -> "the cit sit on the mit"\n')),(0,t.kt)("h3",{id:"reduce"},"reduce"),(0,t.kt)("p",null,"Reduces an array to some value using a function."),(0,t.kt)("h5",{id:"dql-27"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"$reduce(array, function [, init])\n")),(0,t.kt)("h5",{id:"result-27"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$reduce([1,2,3,4], fn($prev, $cur) { $prev*$cur})  -> 24\n")),(0,t.kt)("h3",{id:"split"},"split"),(0,t.kt)("p",null,"Splits a string into an array of strings using a pattern."),(0,t.kt)("h5",{id:"dql-28"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$split($str: string, $pattern: string | regex, $flags?: string) => array\n")),(0,t.kt)("h5",{id:"result-28"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'$split("so many words", " ") -> [ "so", "many", "words" ]\n$split("so many words", " ", 2) -> [ "so", "many" ]\n$split("too much, punctuation. hard; to read", /[ ,.;]+/) -> ["too", "much", "punctuation", "hard", "to", "read"]\n')),(0,t.kt)("h3",{id:"spread"},"spread"),(0,t.kt)("p",null,"Returns an array of objects with a single key/value pair, where the key is the name of the property and the value is the value of the property."),(0,t.kt)("h5",{id:"dql-29"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$spread($val: any) => array(object)\n")),(0,t.kt)("h5",{id:"result-29"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$spread({ "a": 1, "b": 2}) -> [ { "a" : 1}, {"b": 2}]\n')),(0,t.kt)("h3",{id:"string"},"string"),(0,t.kt)("p",null,"Returns the string representation of the input value; if $prettify is true, the output string is formatted for readability."),(0,t.kt)("h5",{id:"dql-30"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$string($value: any, $prettify? true | false) => string\n")),(0,t.kt)("h5",{id:"result-30"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$string({"a": 1, "b": 2}) -> {"a":1, "b" : 2}\n$string(5) -> "5"\n$string([1,2,3]) -> ["1", "2", "3"]\n')),(0,t.kt)("h3",{id:"substring"},"substring"),(0,t.kt)("p",null,"Returns a substring of a string starting at $start and with length $length (if provided)."),(0,t.kt)("h5",{id:"dql-31"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$substring($str: string, $start: number, $length?: number) => string\n")),(0,t.kt)("h5",{id:"result-31"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$substring("hello world", 0, 5) -> "hello"\n$substring("hello world", -5, 5) -> "world"\n')),(0,t.kt)("h3",{id:"substringafter"},"substringAfter"),(0,t.kt)("p",null,"Returns the substring of a string after the first occurrence of a separator."),(0,t.kt)("h5",{id:"dql-32"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$substringAfter($str: string, $separator: string) => string\n")),(0,t.kt)("h5",{id:"result-32"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$substringAfter("abc@gmail.com", "@") -> "gmail.com"\n')),(0,t.kt)("h3",{id:"substringbefore"},"substringBefore"),(0,t.kt)("p",null,"Returns the substring of a string before the first occurrence of a separator."),(0,t.kt)("h5",{id:"dql-33"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$substringBefore($str: string, $separator: string) => string\n")),(0,t.kt)("h5",{id:"result-33"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$substringBefore( "john@gmail.com", "@") -> "john"\n')),(0,t.kt)("h3",{id:"sum"},"sum"),(0,t.kt)("p",null,"Returns the sum of the values of a numeric array."),(0,t.kt)("h5",{id:"dql-34"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$sum($array) => number\n")),(0,t.kt)("h5",{id:"result-34"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$sum([1,2,3,4]) -> 10\n")),(0,t.kt)("h3",{id:"trim"},"trim"),(0,t.kt)("p",null,"Returns a copy of a string with leading and trailing whitespace removed."),(0,t.kt)("h5",{id:"dql-35"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$trim($str: string) => string\n")),(0,t.kt)("h5",{id:"result-35"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$trim(" Hello \\n World ") -> "Hello World"\n')),(0,t.kt)("h3",{id:"type"},"type"),(0,t.kt)("p",null,"Returns the type of a value."),(0,t.kt)("h5",{id:"dql-36"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$type($val: any) => string\n")),(0,t.kt)("h5",{id:"result-36"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$type("hello") -> "string"\n$type(1) -> "number"\n$type({}) -> "object"\n$type([]) -> "array"\n$type(null) -> "null"\n')),(0,t.kt)("h3",{id:"uppercase"},"uppercase"),(0,t.kt)("p",null,"Returns the uppercase version of a string"),(0,t.kt)("h5",{id:"dql-37"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$uppercase($str: string) => string\n")),(0,t.kt)("h5",{id:"result-37"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$uppercase("hello") -> "HELLO"\n')),(0,t.kt)("h3",{id:"uuid"},"uuid"),(0,t.kt)("p",null,"Returns a unique ID (UUID version 4) as a string."),(0,t.kt)("h5",{id:"dql-38"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$uuid => string\n")),(0,t.kt)("h5",{id:"result-38"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$uuid -> "503c5a9f-b8fb-402a-b0d7-fae17490bdf6"\n')),(0,t.kt)("h2",{id:"array-functions"},"Array functions"),(0,t.kt)("h3",{id:"append"},"append"),(0,t.kt)("p",null,"Returns a new array with a value appended (added) to an array."),(0,t.kt)("h5",{id:"dql-39"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$append($arr: array, $val: any) => array\n")),(0,t.kt)("h5",{id:"result-39"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$append([1,2,3], [5,6]) -> [1,2,3,4,5,6]\n$append([1,2,3], 5) -> [1,2,3,5]\n")),(0,t.kt)("h3",{id:"count"},"count"),(0,t.kt)("p",null,"Returns the number of elements in an array."),(0,t.kt)("h5",{id:"dql-40"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$count($array) => number\n")),(0,t.kt)("h5",{id:"result-40"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$count([1,2,3,4,5]) -> 5\n$count([]) -> 0\n")),(0,t.kt)("h3",{id:"distinct"},"distinct"),(0,t.kt)("p",null,"Returns a new array with the distinct elements of $arr with duplicates eliminated."),(0,t.kt)("h5",{id:"dql-41"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$distinct($arr: array) => array\n")),(0,t.kt)("h5",{id:"result-41"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$distinct(["a", "b", "b", "c"]) -> ["a", "b", "c"]\n')),(0,t.kt)("h3",{id:"reverse"},"reverse"),(0,t.kt)("p",null,"Returns a new array with the elements of an array in reverse order."),(0,t.kt)("h5",{id:"dql-42"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$reverse($arr: array) => array\n")),(0,t.kt)("h5",{id:"result-42"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$reverse([1,2,3,4,5]) -> [5,4,3,2,1]\n")),(0,t.kt)("h3",{id:"shuffle"},"shuffle"),(0,t.kt)("p",null,"Returns a new array with the elements of an array in random order."),(0,t.kt)("h5",{id:"dql-43"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$shuffle($arr: array) => array\n")),(0,t.kt)("h5",{id:"result-43"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$shuffle([1,2,3,4]) -> [3,1,4,2]\n")),(0,t.kt)("h3",{id:"sort"},"sort"),(0,t.kt)("p",null,"A higher-order function that sorts the elements of an array using the $swapFn function. The comparator function takes two arguments. If it returns true, the elements will be swapped."),(0,t.kt)("h5",{id:"dql-44"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$sort($arr: array, $swapFn: ($l, $r)) => boolean\n")),(0,t.kt)("h5",{id:"result-44"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"$sort([13,2,8,6,15], fn($l, $r) { '$l > $r' }) -> [2,6,8,13,15]\n$sort([13,2,8,6,15], fn($l, $r) { '$l < $r' }) -> [15,13,8,6,2]\n")),(0,t.kt)("h3",{id:"zip"},"zip"),(0,t.kt)("p",null,"Takes two or more arrays and convolves (zips) each value from a set of arrays."),(0,t.kt)("h5",{id:"dql-45"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$zip($ar1:Array, $ar2:Array, $ar3;Array, ...) => Array\n")),(0,t.kt)("h5",{id:"result-45"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$zip([1,2,3],[4,5,6]) -> [[1,4],[2,5],[3,6]]\n")),(0,t.kt)("h2",{id:"numeric-functions"},"Numeric functions"),(0,t.kt)("h3",{id:"abs"},"abs"),(0,t.kt)("p",null,"Returns the absolute value of a number."),(0,t.kt)("h5",{id:"dql-46"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$abs(n:number) : number\n")),(0,t.kt)("h5",{id:"result-46"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$abs(-1) -> 1\n")),(0,t.kt)("h3",{id:"acos"},"acos"),(0,t.kt)("p",null,"Returns the arc cosine of a number of radians. The result is between 0 and pi. The number must be between -1 and 1."),(0,t.kt)("h5",{id:"dql-47"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$acos($num: number) => number\n")),(0,t.kt)("h5",{id:"result-47"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$acos(1) -> 0\n")),(0,t.kt)("h3",{id:"acosh"},"acosh"),(0,t.kt)("p",null,"Returns the inverse hyperbolic cosine of a number, in radians. The number must be number between 1 and inf. The result is between 0 and inf."),(0,t.kt)("h5",{id:"dql-48"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$acosh($num: number) => number\n")),(0,t.kt)("h5",{id:"result-48"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$acosh(1) -> 0\n")),(0,t.kt)("h3",{id:"asin"},"asin"),(0,t.kt)("p",null,"Returns the arc sine of a number of radians. The result is between -pi/2 and pi/2. The number must be between -1 and 1."),(0,t.kt)("h5",{id:"dql-49"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$asin($num: number) => number\n")),(0,t.kt)("h5",{id:"result-49"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$asin(1) -> 1.5707963267948966\n")),(0,t.kt)("h3",{id:"asinh"},"asinh"),(0,t.kt)("p",null,"Returns the inverse hyperbolic sine of a number, in radians. The result is between -inf and inf."),(0,t.kt)("h5",{id:"dql-50"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$asinh($num: number) => number\n")),(0,t.kt)("h5",{id:"result-50"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$asinh(1) -> 1.5707963267948966\n")),(0,t.kt)("h3",{id:"atan"},"atan"),(0,t.kt)("p",null,"Returns the arc tangent of a number of radians. The result is between -pi/2 and pi/2."),(0,t.kt)("h5",{id:"dql-51"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$atan($num: number) => number\n")),(0,t.kt)("h5",{id:"result-51"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$atan(1) -> 0.7853981633974483\n")),(0,t.kt)("h3",{id:"atanh"},"atanh"),(0,t.kt)("p",null,"Returns the inverse hyperbolic tangent of a number, in radians. The number must be between -1 and 1. The result is between -inf and inf."),(0,t.kt)("h5",{id:"dql-52"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$atanh($num: number) => number\n")),(0,t.kt)("h5",{id:"result-52"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$atanh(1) -> inf\n")),(0,t.kt)("h3",{id:"atan2"},"atan2"),(0,t.kt)("p",null,"Returns atan(y / x), in radians. The result is between -pi and pi. The vector in the plane from the origin to point (x, y) makes this angle with the positive X axis. The signs of both inputs are known to it, so it can compute the correct quadrant for the angle. For example, atan(1) and atan2(1, 1) are both pi/4, but atan2(-1, -1) is -3*pi/4."),(0,t.kt)("h5",{id:"dql-53"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$atan2($x: number, $y: number) => number\n")),(0,t.kt)("h5",{id:"result-53"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$atan2(-1, -1) -> -2.356194490192345\n")),(0,t.kt)("h3",{id:"cbrt"},"cbrt"),(0,t.kt)("p",null,"Returns the cube root of a number."),(0,t.kt)("h5",{id:"dql-54"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$cbrt($num: number) => number\n")),(0,t.kt)("h5",{id:"result-54"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$cbrt(27) -> 3\n")),(0,t.kt)("h3",{id:"ceil"},"ceil"),(0,t.kt)("p",null,"Returns the smallest integer greater than or equal to a number."),(0,t.kt)("h5",{id:"dql-55"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$ceil($num: number) => number\n")),(0,t.kt)("h5",{id:"result-55"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$ceil(3.4) -> 4\n")),(0,t.kt)("h3",{id:"constant"},"constant"),(0,t.kt)("p",null,"Returns the constant value with the given name. For example: e, ln 2, log2 e, log10 e, pi or \u03c0."),(0,t.kt)("h5",{id:"dql-56"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$constant($name: string ) => number\n")),(0,t.kt)("h5",{id:"result-56"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$constant('e') -> 2.718281828459045\n")),(0,t.kt)("h3",{id:"cos"},"cos"),(0,t.kt)("p",null,"Returns the cosine of a number of radians."),(0,t.kt)("h5",{id:"dql-57"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$cos($num: number) => number\n")),(0,t.kt)("h5",{id:"result-57"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$cos(1) -> 0.5403023058681398\n")),(0,t.kt)("h3",{id:"cosh"},"cosh"),(0,t.kt)("p",null,"Returns the hyperbolic cosine of a number of radians."),(0,t.kt)("h5",{id:"dql-58"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$cosh($num: number) => number\n")),(0,t.kt)("h5",{id:"result-58"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$cosh(1) -> 1.5430806348152437\n")),(0,t.kt)("h3",{id:"exp"},"exp"),(0,t.kt)("p",null,"Returns e raised to the power of a number, where e = 2.718281\u2026 is the base of natural logarithms."),(0,t.kt)("h5",{id:"dql-59"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$exp($num: number) => number\n")),(0,t.kt)("h5",{id:"result-59"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$exp(16) -> 8886110.520507872\n")),(0,t.kt)("h3",{id:"floor"},"floor"),(0,t.kt)("p",null,"Returns the largest integer less than or equal to a number."),(0,t.kt)("h5",{id:"dql-60"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$floor($num: number) => number\n")),(0,t.kt)("h5",{id:"result-60"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$floor(3.4) -> 3\n")),(0,t.kt)("h3",{id:"formatbase"},"formatBase"),(0,t.kt)("p",null,"Converts a number to a string in the optional base number system, if a base is not supplied, base 10 is used to create the string."),(0,t.kt)("h5",{id:"dql-61"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$formatBase($num: number, $base?: number) => string\n")),(0,t.kt)("h5",{id:"result-61"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$formatBase(100, 2) -> "1100100"\n')),(0,t.kt)("h3",{id:"isfinite"},"isFinite"),(0,t.kt)("p",null,"Returns true if the value input is not infinity, and false otherwise."),(0,t.kt)("h5",{id:"dql-62"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$isFinite( $num: number ) => number\n")),(0,t.kt)("h5",{id:"result-62"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$isFinite(1) -> true\n$isFinite(inf) -> false\n")),(0,t.kt)("h3",{id:"log"},"log"),(0,t.kt)("p",null,"Returns the natural logarithm of a number (base e)."),(0,t.kt)("h5",{id:"dql-63"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$log($num: number) => number\n")),(0,t.kt)("h5",{id:"result-63"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$log(16) -> 2.772588722239781\n")),(0,t.kt)("h3",{id:"log10"},"log10"),(0,t.kt)("p",null,"Returns the base 10 logarithm of a number."),(0,t.kt)("h5",{id:"dql-64"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$log10($num: number) => number\n")),(0,t.kt)("h5",{id:"result-64"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$log10(16) -> 1.2041199826559248\n")),(0,t.kt)("h3",{id:"log2"},"log2"),(0,t.kt)("p",null,"Returns the base 2 logarithm of a number."),(0,t.kt)("h5",{id:"dql-65"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$log2($num: number) => number\n")),(0,t.kt)("h5",{id:"result-65"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$log2(16) -> 4\n")),(0,t.kt)("h3",{id:"number"},"number"),(0,t.kt)("p",null,"Converts a value to a number."),(0,t.kt)("h5",{id:"dql-66"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$number($x: string | number | bool) => number\n")),(0,t.kt)("h5",{id:"result-66"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$number("-0.05") -> -0.05\n$number(false) -> 0\n$number(true) -> 1\n')),(0,t.kt)("h3",{id:"power"},"power"),(0,t.kt)("p",null,"Returns $num raised to the $exp power."),(0,t.kt)("h5",{id:"dql-67"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$power($num: number, $exp: number) => number\n")),(0,t.kt)("h5",{id:"result-67"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$power(2, 3) -> 8\n$power(3,4) -> 81\n")),(0,t.kt)("h3",{id:"round"},"round"),(0,t.kt)("p",null,"Rounds a number to the optional precision number of decimal places. If precision is negative, then its value specifies which column to round to on the left side of the decimal place."),(0,t.kt)("h5",{id:"dql-68"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$round($num: number, $precision?: number) => number\n")),(0,t.kt)("h5",{id:"result-68"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$round(123.456) -> 123\n$round(123.456, 2) -> 123.46\n$round(123.456, -1) -> 120\n$round(123.456, -2) -> 100\n$round(125, -1) -> 120\n$round(125.456,-1) -> 130\n")),(0,t.kt)("h3",{id:"sin"},"sin"),(0,t.kt)("p",null,"Returns the sine of a number of radians."),(0,t.kt)("h5",{id:"dql-69"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$sin($num: number) => number\n")),(0,t.kt)("h5",{id:"result-69"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$sin(1) -> 0.8414709848078965\n")),(0,t.kt)("h3",{id:"sinh"},"sinh"),(0,t.kt)("p",null,"Returns the hyperbolic sine of a number of radians."),(0,t.kt)("h5",{id:"dql-70"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$sinh($num: number) => number\n")),(0,t.kt)("h5",{id:"result-70"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$sinh(1) -> 1.1752011936438014\n")),(0,t.kt)("h3",{id:"sqrt"},"sqrt"),(0,t.kt)("p",null,"Returns the square root of a number."),(0,t.kt)("h5",{id:"dql-71"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$sqrt($num: number) => number\n")),(0,t.kt)("h5",{id:"result-71"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$sqrt(16) -> 4\n")),(0,t.kt)("h3",{id:"tan"},"tan"),(0,t.kt)("p",null,"Returns the tangent of a number of radians."),(0,t.kt)("h5",{id:"dql-72"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$tan($num: number) => number\n")),(0,t.kt)("h5",{id:"result-72"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$tan(1) -> 1.5574077246549023\n")),(0,t.kt)("h3",{id:"tanh"},"tanh"),(0,t.kt)("p",null,"Returns the hyperbolic tangent of a number of radians."),(0,t.kt)("h5",{id:"dql-73"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$tanh($num: number) => number\n")),(0,t.kt)("h5",{id:"result-73"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$tanh(1) -> 0.7615941559557649\n")),(0,t.kt)("h2",{id:"date-and-time-functions"},"Date and time functions"),(0,t.kt)("h3",{id:"afterdate"},"afterDate"),(0,t.kt)("p",null,"Returns true if $timestamp1 is after $timestamp2, false otherwise."),(0,t.kt)("h5",{id:"dql-74"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$afterDate($timestamp1: string |number, $timestamp2: string |number) => boolean\n")),(0,t.kt)("h5",{id:"result-74"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$afterDate("2023-02-09", "2023-02-08") -> true $afterDate("2023-02-08", "2023-02-08") -> false\n')),(0,t.kt)("h3",{id:"beforedate"},"beforeDate"),(0,t.kt)("p",null,"Returns true if $timestamp1 is before $timestamp2, false otherwise."),(0,t.kt)("h5",{id:"dql-75"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$beforeDate($timestamp1: string |number, $timestamp2: string |number) => boolean\n")),(0,t.kt)("h5",{id:"result-75"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$beforeDate("2023-02-07", "2023-02-08") -> true\n$beforeDate("2023-02-08", "2023-02-08") -> false\n')),(0,t.kt)("h3",{id:"dateequals"},"dateEquals"),(0,t.kt)("p",null,"Returns true if the two timestamps are the same, false otherwise."),(0,t.kt)("h5",{id:"dql-76"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$dateEquals($timestamp1: string |number, $timestamp2: string |number) => boolean\n")),(0,t.kt)("h5",{id:"result-76"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$dateEquals("2023-02-08", "2023-02-08") -> true\n$dateEquals("2023-02-08", "2023-02-07") -> false\n')),(0,t.kt)("h3",{id:"dateplus"},"datePlus"),(0,t.kt)("p",null,"Adds a duration of type $units which can be one of ",'["years", "months", "days", "hours", "minutes", "seconds", "milliseconds"]',", to a $timestamp and returns the new timestamp. If $duration is less than zero, then it will be subtracted from the $timestamp."),(0,t.kt)("h5",{id:"dql-77"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$datePlus($timestamp1: string |number, $duration: number, $units, ) => number\n")),(0,t.kt)("h5",{id:"result-77"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$datePlus("2023-02-07", 2, "days") -> 1675900800000\n$datePlus("2023-02-07", 2, "months") -> 1680825600000\n')),(0,t.kt)("h3",{id:"day"},"day"),(0,t.kt)("p",null,"Extracts the day from a timestamp and returns it as a number."),(0,t.kt)("h5",{id:"dql-78"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$day($timestamp: string |number) => number\n")),(0,t.kt)("h5",{id:"result-78"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$day("2023-02-08") -> 8\n')),(0,t.kt)("h3",{id:"dayoftheweek"},"dayOfTheWeek"),(0,t.kt)("p",null,"Returns the day of the week as a number ","[1=Monday, ... 6=Saturday, 7= Sunday]","."),(0,t.kt)("h5",{id:"dql-79"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$dayOfTheWeek($timestamp: string |number) => number\n")),(0,t.kt)("h5",{id:"result-79"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$dayOftheWeek("2023-02-08") -> 3\n$dayOftheWeek("2023-02-07") -> 2\n')),(0,t.kt)("h3",{id:"diffdate"},"diffDate"),(0,t.kt)("p",null,"Returns the difference between two timestamps in the units specified which can be one of ",'["years", "months", "days", "hours", "minutes", "seconds", "milliseconds"]',"."),(0,t.kt)("h5",{id:"dql-80"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$diffDate($timestamp1: string |number, $timestamp2: string |number, $units : string, ) => number\n")),(0,t.kt)("h5",{id:"result-80"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$diffDate("2023-02-08", "2023-01-22", "days") -> 17\n$diffDate("2023-02-08", "2023-01-22","hours") -> 408\n')),(0,t.kt)("h3",{id:"frommillis"},"fromMillis"),(0,t.kt)("p",null,"Converts a number of milliseconds since the epoch to a string. $picture is optional, if not provided it will default to ISO format. Picture specs are as per Unicode date format standards."),(0,t.kt)("h5",{id:"dql-81"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$fromMillis($val:number, $picture?: string) => string\n")),(0,t.kt)("h5",{id:"result-81"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$fromMillis(1521801216617, "dd/M/yyyy") -> "23/3/2018"\n$fromMillis(1522616700000, "E EEEE") -> "7 Sunday"\n')),(0,t.kt)("h3",{id:"hassamedate"},"hasSameDate"),(0,t.kt)("p",null,"Returns true if the components specified in $units of the two timestamps are the same, false otherwise. $units is an array with one or more strings from ",'["years", "months", "days", "hours", "minutes", "seconds", "milliseconds"]',"."),(0,t.kt)("h5",{id:"dql-82"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$hasSameDate($timestamp1: string |number, $timestamp2: string |number, units?: Array) => boolean\n")),(0,t.kt)("h5",{id:"result-82"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'$hasSameDate("23-02-08", "2019-02-08", ["month", "day"]) -> true\n$hasSameDate("2023-02-01", "2023-02-08", ["month", "year"]) -> true\n$hasSameDate("23-02-01", "2023-02-08", ["month", "year"]) -> true\n$hasSameDate("2023-02-01T07:15:54.730Z", "2023-02-01T14:00:22.340Z", ["year","month", "day"]) -> true\n')),(0,t.kt)("h3",{id:"hours"},"hours"),(0,t.kt)("p",null,"Extracts the local hour component from a timestamp and returns it as a number."),(0,t.kt)("h5",{id:"dql-83"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$hours($timestamp: string |number) => number\n")),(0,t.kt)("h5",{id:"result-83"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$hours("2023-02-08T07:56:14.747+00:00") -> 7\n')),(0,t.kt)("h3",{id:"milliseconds"},"milliSeconds"),(0,t.kt)("p",null,"Extracts the milliseconds from a timestamp and returns it as a number."),(0,t.kt)("h5",{id:"dql-84"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},">$milliSeconds($timestamp: string |number) => number\n")),(0,t.kt)("h5",{id:"result-84"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$milliSeconds("2023-02-08T07:56:14.747+00:00") -> 747\n')),(0,t.kt)("h3",{id:"minutes"},"minutes"),(0,t.kt)("p",null,"Extracts the minutes component from a timestamp and returns it as a number."),(0,t.kt)("h5",{id:"dql-85"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$minutes($timestamp: string |number) => number\n")),(0,t.kt)("h5",{id:"result-85"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$minutes("2023-02-08T07:56:14.747+00:00") -> 56\n')),(0,t.kt)("h3",{id:"month"},"month"),(0,t.kt)("p",null,"Extracts the month component from a timestamp."),(0,t.kt)("h5",{id:"dql-86"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$month($timestamp: string |number) => number\n")),(0,t.kt)("h5",{id:"result-86"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$month("2023-02-08") -> 2\n')),(0,t.kt)("h3",{id:"seconds"},"seconds"),(0,t.kt)("p",null,"Extracts the local seconds component from a timestamp and returns it as a number."),(0,t.kt)("h5",{id:"dql-87"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$seconds($timestamp: string |number) => number\n")),(0,t.kt)("h5",{id:"result-87"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$seconds("2023-02-08T07:56:14.747+00:00") -> 14\n')),(0,t.kt)("h3",{id:"tomillis"},"toMillis"),(0,t.kt)("p",null,"Converts a string to a number of milliseconds since the epoch. $picture is optional, if not provided it will default to ISO format. Picture specs are as per Unicode date format standards."),(0,t.kt)("h5",{id:"dql-88"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$toMillis($val:string, $picture?: string) => number\n")),(0,t.kt)("h5",{id:"result-88"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$toMillis("1970-01-01T00:00:00.001Z")  -> 1\n$toMillis("2018-03-27", "yyyy-MM-dd") -> 1522108800000\n$toMillis("21 August 2017", "dd MMMM yyyy") -> 1503273600000\n')),(0,t.kt)("h3",{id:"year"},"year"),(0,t.kt)("p",null,"Extracts the year component from a timestamp and returns it as a number."),(0,t.kt)("h5",{id:"dql-89"},"DQL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$year($timestamp: string |number) => number\n")),(0,t.kt)("h5",{id:"result-89"},"Result"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'$year("2023-02-08T07:56:14.747+00:00") -> 2023\n')))}h.isMDXComponent=!0}}]);