"use strict";(self.webpackChunkdronahq_docs=self.webpackChunkdronahq_docs||[]).push([[46617],{85227:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>k,frontMatter:()=>s,metadata:()=>p,toc:()=>d});a(67294);var n=a(3905);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const s={sidebar_position:99},i="Deploy Kubernetes Cluster on MacOS (M1/M2) with ubuntu virtual machines",p={unversionedId:"self-hosted-deployment/deploy-kubernetes-on-macos",id:"self-hosted-deployment/deploy-kubernetes-on-macos",title:"Deploy Kubernetes Cluster on MacOS (M1/M2) with ubuntu virtual machines",description:"Running Ubuntu VMs on MacOS Using Multipass. And Deploying Kubernetes cluster on it using Kubeadm.",source:"@site/docs/self-hosted-deployment/deploy-kubernetes-on-macos.md",sourceDirName:"self-hosted-deployment",slug:"/self-hosted-deployment/deploy-kubernetes-on-macos",permalink:"/self-hosted-deployment/deploy-kubernetes-on-macos",draft:!1,tags:[],version:"current",lastUpdatedAt:1707914129,formattedLastUpdatedAt:"Feb 14, 2024",sidebarPosition:99,frontMatter:{sidebar_position:99},sidebar:"docSidebar",previous:{title:"Environment Variables",permalink:"/self-hosted-deployment/environment-variables"},next:{title:"Concepts",permalink:"/category/concepts-3"}},u={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Install Cluster",id:"install-cluster",level:2},{value:"Step 1 - Provision VMs with Multipass",id:"step-1---provision-vms-with-multipass",level:3},{value:"Step 2 - Set up Operating System Prerequisites",id:"step-2---set-up-operating-system-prerequisites",level:3},{value:"Step 3 - Set up Container Runtime (containerd)",id:"step-3---set-up-container-runtime-containerd",level:3},{value:"Step 4 - Install kubeadm, kubelet and kubectl",id:"step-4---install-kubeadm-kubelet-and-kubectl",level:3},{value:"Step 5 - Provisioning the Kubernetes Cluster",id:"step-5---provisioning-the-kubernetes-cluster",level:3},{value:"Notes",id:"notes",level:2}],m={toc:d},c="wrapper";function k(e){var{components:t}=e,a=l(e,["components"]);return(0,n.kt)(c,o(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){r(e,t,a[t])}))}return e}({},m,a),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"deploy-kubernetes-cluster-on-macos-m1m2-with-ubuntu-virtual-machines"},"Deploy Kubernetes Cluster on MacOS (M1/M2) with ubuntu virtual machines"),(0,n.kt)("p",null,"Running Ubuntu VMs on MacOS Using ",(0,n.kt)("a",{parentName:"p",href:"https://multipass.run/"},"Multipass"),". And Deploying Kubernetes cluster on it using ",(0,n.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/setup-tools/kubeadm/"},"Kubeadm"),"."),(0,n.kt)("p",null,"This document is referenced from ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/kodekloudhub/certified-kubernetes-administrator-course/blob/master/apple-silicon/README.md"},"KodeKloud"),"."),(0,n.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"8GB RAM (16GB preferred).",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"All configurations - One control plane node will be provisioned - ",(0,n.kt)("inlineCode",{parentName:"li"},"kubemaster")),(0,n.kt)("li",{parentName:"ul"},"If you have less than 16GB then only one worker node will be provisioned - ",(0,n.kt)("inlineCode",{parentName:"li"},"kubeworker1")),(0,n.kt)("li",{parentName:"ul"},"If you have 16GB or more then two workers will be provisioned - ",(0,n.kt)("inlineCode",{parentName:"li"},"kubeworker01")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"kubeworker2"))))),(0,n.kt)("p",null,"You'll need to install the following first."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Multipass - ",(0,n.kt)("a",{parentName:"li",href:"https://multipass.run/install"},"https://multipass.run/install"),". Follow the instructions to install it and check it is working properly. You should be able to successfully create a test Ubuntu VM following their instructions. Delete the test VM when you're done."),(0,n.kt)("li",{parentName:"ul"},"JQ - ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/stedolan/jq/wiki/Installation"},"https://github.com/stedolan/jq/wiki/Installation"))),(0,n.kt)("p",null,"Additionally"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Your account on your Mac must have admin privilege and be able to use ",(0,n.kt)("inlineCode",{parentName:"p"},"sudo"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Clone this repo down to your Mac. Open your Mac's terminal application. All commands in this guide are executed from the terminal."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/dronahq/self-hosted.git\ncd self-hosted/multipass\n")))),(0,n.kt)("h2",{id:"install-cluster"},"Install Cluster"),(0,n.kt)("p",null,"These instructions follow the steps in the lecture videos fairly closely, however we need to use versions of the various software to install that are compatible with ARM architecture. This means that wherever the lecture shows software downloads with ",(0,n.kt)("inlineCode",{parentName:"p"},"linux-amd64")," in the name, we are going to choose the corresponding ",(0,n.kt)("inlineCode",{parentName:"p"},"linux-arm64")," version."),(0,n.kt)("h3",{id:"step-1---provision-vms-with-multipass"},"Step 1 - Provision VMs with Multipass"),(0,n.kt)("p",null,"Because we cannot use VirtualBox and are instead using Multipass, ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/dronahq/self-hosted/blob/main/multipass/deploy-virtual-machines.sh"},"a script is provided")," to create the three VMs."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Run the VM deploy script from your Mac terminal"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"./deploy-virtual-machines.sh\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Verify you can connect to all three (two if your Mac only has 8GB RAM) VMs:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"multipass shell kubemaster\n")),(0,n.kt)("p",{parentName:"li"},"You should see a command prompt like ",(0,n.kt)("inlineCode",{parentName:"p"},"ubuntu@kubemaster:~$")),(0,n.kt)("p",{parentName:"li"},"Type the following to return to the Mac terminal"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"exit\n")),(0,n.kt)("p",{parentName:"li"},"Do this for ",(0,n.kt)("inlineCode",{parentName:"p"},"kubeworker01")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"kubeworker02")," as well"),(0,n.kt)("p",{parentName:"li"},'In the following instructions when it says "connect to" any of the VMs, it means use the ',(0,n.kt)("inlineCode",{parentName:"p"},"multipass shell")," command as above."))),(0,n.kt)("h3",{id:"step-2---set-up-operating-system-prerequisites"},"Step 2 - Set up Operating System Prerequisites"),(0,n.kt)("p",null,"Connect to each VM in turn, and run the following:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Execute the following commands in each VM terminal"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# Load required kernel modules\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# Persist modules between restarts\ncat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\n# Set required networking parameters\ncat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n")))),(0,n.kt)("h3",{id:"step-3---set-up-container-runtime-containerd"},"Step 3 - Set up Container Runtime (containerd)"),(0,n.kt)("p",null,"Here we deviate slightly from the lecture. Using the default version of ",(0,n.kt)("inlineCode",{parentName:"p"},"containerd")," that is provided by ",(0,n.kt)("inlineCode",{parentName:"p"},"apt-get install")," results in a cluster with crashlooping pods, so we install a version that works by downloading directly from their github site."),(0,n.kt)("p",null,"Connect to each VM in turn, and run the following scripts:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Download and unzip the containerd application"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl -LO https://github.com/containerd/containerd/releases/download/v1.7.0/containerd-1.7.0-linux-arm64.tar.gz\nsudo tar Czxvf /usr/local containerd-1.7.0-linux-arm64.tar.gz\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Download and place the systemd unit file"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl -LO https://license.dronahq.com/self-hosted/master/init/containerd.service\nsudo mkdir -p /usr/lib/systemd/system\nsudo mv containerd.service /usr/lib/systemd/system/\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create containerd configuration file"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mkdir -p /etc/containerd/\nsudo containerd config default | sudo tee /etc/containerd/config.toml > /dev/null\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Enable systemd CGroup driver"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo sed -i 's/SystemdCgroup \\= false/SystemdCgroup \\= true/g' /etc/containerd/config.toml\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set containerd to auto-start at boot (enable it)."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl enable --now containerd\n")))),(0,n.kt)("h3",{id:"step-4---install-kubeadm-kubelet-and-kubectl"},"Step 4 - Install kubeadm, kubelet and kubectl"),(0,n.kt)("p",null,"Connect to each VM in turn and perform the following steps"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Update the apt package index and install packages needed to use the Kubernetes apt repository"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Download the Google Cloud public signing key"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Add the Kubernetes apt repository"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n'))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Update apt package index, install kubelet, kubeadm and kubectl, and pin their version:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"KUBE_VERSION=1.27.3\nsudo apt-get update\nsudo apt-get install -y kubelet=${KUBE_VERSION}-00 jq kubectl=${KUBE_VERSION}-00 kubeadm=${KUBE_VERSION}-00 runc kubernetes-cni=1.2.0-00\nsudo apt-mark hold kubelet kubeadm kubectl\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Configure crictl to work with containerd"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock\n")))),(0,n.kt)("h3",{id:"step-5---provisioning-the-kubernetes-cluster"},"Step 5 - Provisioning the Kubernetes Cluster"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Configure the Control Plane"),(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Connect to the control plane node")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Determine the IP address of the control plane node. We will need it for the forthcoming ",(0,n.kt)("inlineCode",{parentName:"p"},"kubeadm init")," command."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"dig +short kubemaster | grep -v 127\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Initialize control plane."),(0,n.kt)("p",{parentName:"li"},"As per the lecture, we are going to use a pod CIDR of 10.244.0.0/16. Run the following command, replacing ",(0,n.kt)("inlineCode",{parentName:"p"},"[IP]")," with the IP address you got from the previous step"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=[ip]\n")),(0,n.kt)("p",{parentName:"li"},"OR"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=$(dig +short kubemaster | grep -v 127)\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set up the kubeconfig file."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir ~/.kube\nsudo cp /etc/kubernetes/admin.conf ~/.kube/config\nsudo chown ubuntu:ubuntu ~/.kube/config\nchmod 600 ~/.kube/config\n")),(0,n.kt)("p",{parentName:"li"},"OR"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\nchmod 600 ~/.kube/config\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Verify the cluster is contactable"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n kube-system\n")),(0,n.kt)("p",{parentName:"li"},"You should see some output. Pods may not all be ready yet.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Install Weave for cluster networking"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl apply -f "https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s-1.11.yaml"\n')),(0,n.kt)("p",{parentName:"li"},"It will take up to a minute for the weave pod to be ready")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Prepare the join command for the worker nodes"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubeadm token create --print-join-command\n")),(0,n.kt)("p",{parentName:"li"},"Copy the output of this. We will need to paste it on the worker(s)")))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Configure the worker nodes"),(0,n.kt)("p",{parentName:"li"},"For each worker node"),(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Connect to the worker node")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Paste the join command you copied from the final step of configuring the control plane to the command prompt and run it. Put ",(0,n.kt)("inlineCode",{parentName:"p"},"sudo")," on the command line first, then paste the join command after sudo so it looks like"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"sudo kubeadm join 192.168.64.4:6443 --token whd8v4.EXAMPLE --discovery-token-ca-cert-hash sha256:9537c57af216775e26ffa7ad3e495-5EXAMPLE`\n")))))),(0,n.kt)("h2",{id:"notes"},"Notes"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Deleting the VMs"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"./delete-virtual-machines.sh\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Stopping and restarting the VMs"),(0,n.kt)("p",{parentName:"li"},"To stop the VMs, stop the workers first, then finally kubemaster"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"multipass stop kubeworker01\nmultipass stop kubeworker02\nmultipass stop kubemaster\n")),(0,n.kt)("p",{parentName:"li"},"To restart them, start the control plane first"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"multipass start kubemaster\n# Wait 30 sec or so\nmultipass start kubeworker01\nmultipass start kubeworker02\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"To see the state of VMs, run"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"multipass list\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Multipass allocates IP addresses from the Mac's DHCP server to assign to VMs. When the VMs are deleted, it does not release them. If you build and tear down this a few times, you will run out of addresses on the network used for this purpose. Reclaiming them is a manual operation. To do this, you must remove the spent addresses from the file ",(0,n.kt)("inlineCode",{parentName:"p"},"/var/db/dhcpd_leases")," This file looks like this:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-json"},"{\n        name=kubemaster\n        ip_address=192.168.64.22\n        hw_address=1,52:54:0:eb:c4:7\n        identifier=1,52:54:0:eb:c4:7\n        lease=0x643f6f22\n}\n{\n        name=kubeworker01\n        ip_address=192.168.64.23\n        hw_address=1,52:54:0:93:3d:91\n        identifier=1,52:54:0:93:3d:91\n        lease=0x643f6f20\n}\n")),(0,n.kt)("p",{parentName:"li"},"Once you have deleted all your VMs, edit this file and remove all the blocks (including their surrounding ",(0,n.kt)("inlineCode",{parentName:"p"},"{ }"),") related to kubemaster and kubeworker. In the above example you would delete everything you can see. Do this for all kubemsters and kubeworkers."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"sudo vi /var/db/dhcpd_leases\n")))))}k.isMDXComponent=!0}}]);