"use strict";(self.webpackChunkdronahq_docs=self.webpackChunkdronahq_docs||[]).push([[47565],{84539:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>d});n(67294);var a=n(3905);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const l={sidebar_position:94},c="Configure SSL and CA Certificates",s={unversionedId:"self-hosted-deployment/configure-ssl-and-ca-certificates",id:"self-hosted-deployment/configure-ssl-and-ca-certificates",title:"Configure SSL and CA Certificates",description:"In today's digital landscape, securing web applications is paramount. One of the fundamental aspects of web security is",source:"@site/docs/self-hosted-deployment/configure-ssl-and-ca-certificates.md",sourceDirName:"self-hosted-deployment",slug:"/self-hosted-deployment/configure-ssl-and-ca-certificates",permalink:"/self-hosted-deployment/configure-ssl-and-ca-certificates",draft:!1,tags:[],version:"current",lastUpdatedAt:1708590593,formattedLastUpdatedAt:"Feb 22, 2024",sidebarPosition:94,frontMatter:{sidebar_position:94},sidebar:"docSidebar",previous:{title:"Deploy DronaHQ with Kubernetes (K8s)",permalink:"/self-hosted-deployment/deployment-options/kubernetes"},next:{title:"Horizontal Scaling",permalink:"/self-hosted-deployment/horizontal-scaling"}},p={},d=[{value:"Setting up Domain:",id:"setting-up-domain",level:2},{value:"Configuring SSL for Docker-Based Installation",id:"configuring-ssl-for-docker-based-installation",level:2},{value:"Configure Self-Signed Certificates:",id:"configure-self-signed-certificates",level:3},{value:"Configuring Custom Certificates:",id:"configuring-custom-certificates",level:3}],m={toc:d},u="wrapper";function f(e){var{components:t}=e,n=o(e,["components"]);return(0,a.kt)(u,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){i(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"configure-ssl-and-ca-certificates"},"Configure SSL and CA Certificates"),(0,a.kt)("p",null,"In today's digital landscape, securing web applications is paramount. One of the fundamental aspects of web security is\nimplementing SSL/TLS encryption to protect data transmitted between clients and servers. In this guide, we'll delve into\nconfiguring SSL and CA certificates for Docker-based installations, ensuring your web applications are safeguarded\nagainst potential threats."),(0,a.kt)("h2",{id:"setting-up-domain"},"Setting up Domain:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Begin by configuring your domain name in the Nginx configuration file. Copy the default ",(0,a.kt)("inlineCode",{parentName:"p"},"nginx.conf")," file and replace\noccurrences of ",(0,a.kt)("inlineCode",{parentName:"p"},"%domainname%")," with your actual domain name."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cp init/nginx.conf nginx.conf\n# Make changes in nginx.conf replacing `%domainname%` with `domain_actual`\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Update the ",(0,a.kt)("inlineCode",{parentName:"p"},"builder_url")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"dronahq.env")," file to reflect your assigned domain."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nano dronahq.env\n# Update builder_url to https://domain_name\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Restart the web server to apply the changes."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker-compose stop webapp webserver\nsudo docker-compose rm webapp webserver\nsudo docker-compose up -d webapp webserver\n")))),(0,a.kt)("h2",{id:"configuring-ssl-for-docker-based-installation"},"Configuring SSL for Docker-Based Installation"),(0,a.kt)("h3",{id:"configure-self-signed-certificates"},"Configure Self-Signed Certificates:"),(0,a.kt)("p",null,"To configure SSL for your Docker-based installation, follow these steps to generate and implement a self-signed\ncertificate:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Copy the default configuration file ",(0,a.kt)("inlineCode",{parentName:"p"},"nginx.conf")," located in the ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," directory\nto the root directory and make necessary changes to accommodate your domain."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cp init/nginx.conf nginx.conf\n")),(0,a.kt)("p",{parentName:"li"},"Update occurrences of ",(0,a.kt)("inlineCode",{parentName:"p"},"%domainname%")," with your actual domain name in the ",(0,a.kt)("inlineCode",{parentName:"p"},"nginx.conf")," file.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Restart the web server to apply the updated configuration."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker-compose restart webserver\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Generate the SSL certificate using Certbot with the provided Docker Compose\nconfiguration. Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"<your_email_id>")," with your email address and ",(0,a.kt)("inlineCode",{parentName:"p"},"<your_custom_domain>")," with your custom domain."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker-compose -f certbot-docker-compose.yml run --rm certbot certonly --webroot --webroot-path /var/www/certbot/ --force-renewal --email <your_email_id> -d <your_custom_domain> --agree-tos --non-interactive\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Copy the default configuration file ",(0,a.kt)("inlineCode",{parentName:"p"},"nginx-ssl-default.conf")," from the\n",(0,a.kt)("inlineCode",{parentName:"p"},"init")," directory to the root directory, then replace occurrences of ",(0,a.kt)("inlineCode",{parentName:"p"},"%domainname%")," with your actual domain name."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cp init/nginx-ssl-default.conf nginx.conf\n")),(0,a.kt)("p",{parentName:"li"},"Update all occurrences of ",(0,a.kt)("inlineCode",{parentName:"p"},"%domainname%")," with your real domain in the ",(0,a.kt)("inlineCode",{parentName:"p"},"nginx.conf")," file.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"builder_url")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"dronahq.env")," file to use HTTPS with your domain name."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nano dronahq.env\n# Replace builder_url with https://domain_name\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Restart Services: Stop and remove the web application and web server containers, then bring them back up to apply\nthe SSL configuration."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker-compose stop webapp webserver\nsudo docker-compose rm webapp webserver\nsudo docker-compose up -d webapp webserver\n")))),(0,a.kt)("h3",{id:"configuring-custom-certificates"},"Configuring Custom Certificates:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"If you have custom SSL certificates, copy them to a designated folder on your machine. Let's denote this folder as XYZ."),(0,a.kt)("li",{parentName:"ol"},"Update the ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-compose.yml")," file to include the volume mapping for the certificate files. Replace ",(0,a.kt)("inlineCode",{parentName:"li"},"/xyz/")," with the path to your custom certificate folder and ensure it's appropriately mounted to ",(0,a.kt)("inlineCode",{parentName:"li"},"/certificates/")," within the container.",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"services:\n  webserver:\n    volumes:\n      - /path/to/XYZ/:/certificates/:ro\n")),"Ensure that XYZ can be replaced with the actual folder name where your certificates are stored."),(0,a.kt)("li",{parentName:"ol"},"Modify the ",(0,a.kt)("inlineCode",{parentName:"li"},"nginx.conf")," file to point to the custom certificate locations.",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cp init/nginx-ssl-default.conf nginx.conf\n# Replace all occurrences of `%domainname%` with your actual domain name\nReplace:\n  ssl_certificate /etc/nginx/ssl/live/%domainname%/fullchain.pem;\n  ssl_certificate_key /etc/nginx/ssl/live/%domainname%/privkey.pem;\nWith:\n  ssl_certificate /certificates/fullchain.pem;\n  ssl_certificate_key /certificates/privkey.pem;\n"))),(0,a.kt)("li",{parentName:"ol"},"Restart the web server to apply the custom certificate configuration.",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker-compose stop webapp webserver\nsudo docker-compose rm webapp webserver\nsudo docker-compose up -d webapp webserver\n")))))}f.isMDXComponent=!0}}]);