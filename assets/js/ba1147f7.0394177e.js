"use strict";(self.webpackChunkdronahq_docs=self.webpackChunkdronahq_docs||[]).push([[77701],{37925:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>b,frontMatter:()=>l,metadata:()=>p,toc:()=>u});n(67294);var o=n(3905),a=n(86291);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const l={sidebar_position:1,title:"WebSocket Integration Using DronaHQ"},c=void 0,p={unversionedId:"building-apps-guides/websocket-dronahq",id:"building-apps-guides/websocket-dronahq",title:"WebSocket Integration Using DronaHQ",description:"This document provides a detailed overview of integrating WebSockets into DronaHQ. We will see establishing a WebSocket",source:"@site/docs/building-apps-guides/websocket-dronahq.md",sourceDirName:"building-apps-guides",slug:"/building-apps-guides/websocket-dronahq",permalink:"/building-apps-guides/websocket-dronahq",draft:!1,tags:[],version:"current",lastUpdatedAt:1729589972,formattedLastUpdatedAt:"Oct 22, 2024",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"WebSocket Integration Using DronaHQ"},sidebar:"docSidebar",previous:{title:"Google Sheet - Multiple Row update",permalink:"/building-apps-guides/update-multiplerows-google-sheet"},next:{title:"Dynamic repeating list of control",permalink:"/building-apps-guides/dynamic-repeating-list-controls"}},d={},u=[{value:"Integrating WebSocket into Custom Control",id:"integrating-websocket-into-custom-control",level:2},{value:"Objective of WebSocket inside a Control",id:"objective-of-websocket-inside-a-control",level:3},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Steps to Implement WebSocket in DronaHQ",id:"steps-to-implement-websocket-in-dronahq",level:2},{value:"Create a Custom Control in DronaHQ",id:"create-a-custom-control-in-dronahq",level:3},{value:"HTML Code for WebSocket Control",id:"html-code-for-websocket-control",level:3},{value:"HTML Explanation",id:"html-explanation",level:2},{value:"JavaScript Explanation",id:"javascript-explanation",level:2},{value:"1. Variables",id:"1-variables",level:3},{value:"2. Functions",id:"2-functions",level:3},{value:"A. displayMessage(message)",id:"a-displaymessagemessage",level:4},{value:"B. startWebSocket(symbol)",id:"b-startwebsocketsymbol",level:4},{value:"3. Event Listeners",id:"3-event-listeners",level:3},{value:"a. Start Button Event Listener",id:"a-start-button-event-listener",level:4},{value:"b. Clear Button Event Listener",id:"b-clear-button-event-listener",level:4},{value:"Conclusion",id:"conclusion",level:2}],m={toc:u},k="wrapper";function b(e){var{components:t}=e,n=s(e,["components"]);return(0,o.kt)(k,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){i(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This document provides a detailed overview of integrating WebSockets into DronaHQ. We will see establishing a WebSocket\nconnection, create real-time data streams, and trigger events within your DronaHQ application."),(0,o.kt)("p",null,"The provided steps demonstrate how to build a dynamic WebSocket interface that interacts with Binance\u2019s API, but the\nmethodology can be adapted to other WebSocket API."),(0,o.kt)("h2",{id:"integrating-websocket-into-custom-control"},"Integrating WebSocket into Custom Control"),(0,o.kt)("p",null,"DronaHQ\u2019s ",(0,o.kt)("a",{parentName:"p",href:"https://docs.dronahq.com/reference/controls/custom-control/"},"Custom Control")," allows developers to embed\ncustom HTML, JavaScript, and CSS inside the DronaHQ platform using an iframe. With this setup, you can pass data between\nDronaHQ controls and the custom logic embedded within your HTML."),(0,o.kt)("h3",{id:"objective-of-websocket-inside-a-control"},"Objective of WebSocket inside a Control"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Allow users to input cryptocurrency tickers (like BTC, ETH)."),(0,o.kt)("li",{parentName:"ul"},"Show real-time price updates from Binance WebSocket API."),(0,o.kt)("li",{parentName:"ul"},"Include functionality to reset/close the WebSocket connection dynamically.")),(0,o.kt)("figure",null,(0,o.kt)(a.Z,{src:"/img/building-apps-guides/websocket/websocket-app.jpeg",alt:"WebSocket implied Application.",mdxType:"Thumbnail"}),(0,o.kt)("figcaption",{align:"center"},(0,o.kt)("i",null,"WebSocket implied Application."))),(0,o.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Basic knowledge of WebSocket API, JavaScript, and DronaHQ custom controls."),(0,o.kt)("li",{parentName:"ul"},"An enterprise DronaHQ subscription."),(0,o.kt)("li",{parentName:"ul"},"Access to the Binance WebSocket API ",(0,o.kt)("inlineCode",{parentName:"li"},"(wss://ws-api.binance.com:443/ws-api/v3)"),".")),(0,o.kt)("h2",{id:"steps-to-implement-websocket-in-dronahq"},"Steps to Implement WebSocket in DronaHQ"),(0,o.kt)("h3",{id:"create-a-custom-control-in-dronahq"},"Create a Custom Control in DronaHQ"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Drag and drop Custom Controls in the DronaHQ interface."),(0,o.kt)("li",{parentName:"ol"},"Go to its property and put the code under ",(0,o.kt)("inlineCode",{parentName:"li"},"Write your code"),".")),(0,o.kt)("figure",null,(0,o.kt)(a.Z,{src:"/img/building-apps-guides/websocket/websocket-app-code.jpeg",alt:"Code section for the Custom Control.",mdxType:"Thumbnail"}),(0,o.kt)("figcaption",{align:"center"},(0,o.kt)("i",null,"Code section for the Custom Control."))),(0,o.kt)("h3",{id:"html-code-for-websocket-control"},"HTML Code for WebSocket Control"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    \x3c!-- Sets character encoding for the page --\x3e\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    \x3c!-- Makes the page responsive for all devices --\x3e\n    <title>Binance WebSocket Example</title>\n\n    <style>\n      /* Styling the page elements */\n      body {\n        font-family: Arial, sans-serif;\n        margin: 20px;\n      }\n      input,\n      button {\n        padding: 10px;\n        margin: 5px;\n      }\n      #output {\n        margin-top: 20px;\n        max-height: 300px; /* Limits the height of the output area */\n        overflow-y: auto; /* Adds a vertical scrollbar if content exceeds the height */\n        background-color: #f4f4f4;\n        border: 1px solid #ddd;\n        padding: 10px;\n      }\n    </style>\n  </head>\n  <body>\n    <h2>Real-Time Crypto Price Updates</h2>\n\n    \x3c!-- Input field for entering a crypto pair --\x3e\n    <label for=\"symbolInput\">Enter Crypto Pair (e.g., BTCUSDT):</label>\n    <input type=\"text\" id=\"symbolInput\" placeholder=\"Enter coin pair\" />\n\n    \x3c!-- Buttons to start WebSocket connection and clear the output --\x3e\n    <button id=\"startBtn\">Start</button>\n    <button id=\"clearBtn\">Clear & Close</button>\n\n    \x3c!-- Div to display the incoming price updates --\x3e\n    <div id=\"output\"></div>\n\n    <script>\n      let socket; // Variable to store the WebSocket instance\n      const output = document.getElementById('output'); // Reference to the output div\n\n      // Function to display messages inside the output div\n      function displayMessage(message) {\n        const p = document.createElement('p'); // Create a new paragraph element\n        p.textContent = message; // Set its content to the provided message\n        output.appendChild(p); // Add the paragraph to the output div\n      }\n\n      // Function to initiate WebSocket connection for the given crypto pair\n      function startWebSocket(symbol) {\n        const streamUrl = `wss://stream.binance.com:9443/ws/${symbol.toLowerCase()}@trade`; // Binance WebSocket URL\n        socket = new WebSocket(streamUrl); // Create a new WebSocket instance\n\n        // Event listener for when the connection opens\n        socket.addEventListener('open', () => {\n          displayMessage(`Connected to WebSocket for ${symbol}.`);\n        });\n\n        // Event listener for incoming messages (price updates)\n        socket.addEventListener('message', event => {\n          const data = JSON.parse(event.data); // Parse the JSON data from the WebSocket\n          const price = parseFloat(data.p).toFixed(2); // Extract and format the price\n          displayMessage(`Price Update for ${symbol}: $${price}`); // Display the price update\n        });\n\n        // Event listener for handling errors\n        socket.addEventListener('error', error => {\n          displayMessage(`WebSocket Error: ${error.message}`);\n        });\n\n        // Event listener for when the connection closes\n        socket.addEventListener('close', () => {\n          displayMessage('WebSocket connection closed.');\n        });\n      }\n\n      // Start WebSocket connection when the \"Start\" button is clicked\n      document.getElementById('startBtn').addEventListener('click', () => {\n        const symbol = document.getElementById('symbolInput').value.trim(); // Get the entered symbol\n        if (symbol) {\n          if (socket) socket.close(); // Close any previous connection\n          startWebSocket(symbol); // Start a new WebSocket connection\n        } else {\n          alert('Please enter a valid crypto pair.'); // Alert if input is empty\n        }\n      });\n\n      // Clear the output and close WebSocket connection when the \"Clear & Close\" button is clicked\n      document.getElementById('clearBtn').addEventListener('click', () => {\n        output.innerHTML = ''; // Clear the output area\n        if (socket) {\n          socket.close(); // Close the WebSocket connection\n          socket = null; // Reset the socket variable\n        }\n      });\n    <\/script>\n  </body>\n</html>\n")),(0,o.kt)("h2",{id:"html-explanation"},"HTML Explanation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"<input>")," field allows users to enter the cryptocurrency pair they want to track."),(0,o.kt)("li",{parentName:"ul"},"Two buttons control the interaction: one to start the WebSocket connection and another to clear the output and close\nthe connection."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},'<div id="output">')," is where real-time price updates are displayed.")),(0,o.kt)("h2",{id:"javascript-explanation"},"JavaScript Explanation"),(0,o.kt)("h3",{id:"1-variables"},"1. Variables"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let socket; // Variable to store the WebSocket instance\nconst output = document.getElementById('output'); // Reference to the output div\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"socket"),": This variable will hold the WebSocket connection instance, allowing us to send and receive data, and control\nthe connection (open/close)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"output"),": This is a reference to the ",(0,o.kt)("inlineCode",{parentName:"li"},'<div id="output">')," element where messages (like connection status and price\nupdates) will be displayed.")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"2-functions"},"2. Functions"),(0,o.kt)("h4",{id:"a-displaymessagemessage"},"A. displayMessage(message)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"function displayMessage(message) {\n  const p = document.createElement('p'); // Create a new <p> element\n  p.textContent = message; // Set the content of <p> to the provided message\n  output.appendChild(p); // Append the <p> to the output div\n}\n")),(0,o.kt)("p",null,"This function creates a new paragraph (",(0,o.kt)("inlineCode",{parentName:"p"},"<p>"),") element for every message received or status update, then adds it to the\noutput section on the webpage."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"b-startwebsocketsymbol"},"B. startWebSocket(symbol)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"function startWebSocket(symbol) {\n  const streamUrl = `wss://stream.binance.com:9443/ws/${symbol.toLowerCase()}@trade`; // Construct WebSocket URL\n  socket = new WebSocket(streamUrl); // Create a new WebSocket connection\n\n  socket.addEventListener('open', () => {\n    displayMessage(`Connected to WebSocket for ${symbol}.`); // Notify on successful connection\n  });\n\n  socket.addEventListener('message', event => {\n    const data = JSON.parse(event.data); // Parse the incoming JSON data\n    const price = parseFloat(data.p).toFixed(2); // Extract and format the price value\n    displayMessage(`Price Update for ${symbol}: $${price}`); // Display the price update\n  });\n\n  socket.addEventListener('error', error => {\n    displayMessage(`WebSocket Error: ${error.message}`); // Handle and display connection errors\n  });\n\n  socket.addEventListener('close', () => {\n    displayMessage('WebSocket connection closed.'); // Notify when the connection is closed\n  });\n}\n")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Creates the WebSocket URL:",(0,o.kt)("br",{parentName:"p"}),"\n","For example, if the user enters ",(0,o.kt)("inlineCode",{parentName:"p"},"BTCUSDT"),", the URL becomes:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"wss://stream.binance.com:9443/ws/btcusdt@trade\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"open")," Event:",(0,o.kt)("br",{parentName:"p"}),"\n","When the WebSocket connection is established, it displays a message:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"Connected to WebSocket for BTCUSDT.\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"message")," Event:",(0,o.kt)("br",{parentName:"p"}),"\n","When new data (e.g., price update) is received from the WebSocket, it:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Parses the JSON data from Binance."),(0,o.kt)("li",{parentName:"ul"},"Extracts the price (",(0,o.kt)("inlineCode",{parentName:"li"},"data.p"),") and rounds it to 2 decimal places."),(0,o.kt)("li",{parentName:"ul"},"Displays the update, e.g.:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"Price Update for BTCUSDT: $30500.45\n"))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"error")," Event:",(0,o.kt)("br",{parentName:"p"}),"\n","If there's a WebSocket error, it displays the error message.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"close")," Event:",(0,o.kt)("br",{parentName:"p"}),"\n","If the connection closes, it shows a message to inform the user."))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"3-event-listeners"},"3. Event Listeners"),(0,o.kt)("h4",{id:"a-start-button-event-listener"},"a. Start Button Event Listener"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"document.getElementById('startBtn').addEventListener('click', () => {\n  const symbol = document.getElementById('symbolInput').value.trim(); // Get the entered symbol\n  if (symbol) {\n    if (socket) socket.close(); // Close any existing connection\n    startWebSocket(symbol); // Start a new WebSocket connection\n  } else {\n    alert('Please enter a valid crypto pair.'); // Alert if input is invalid\n  }\n});\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'On clicking the "Start" button, it reads the input from the user (e.g., ',(0,o.kt)("inlineCode",{parentName:"li"},"BTCUSDT"),")."),(0,o.kt)("li",{parentName:"ul"},"If a WebSocket connection is already open, it closes it before starting a new one."),(0,o.kt)("li",{parentName:"ul"},"If the input is empty or invalid, it shows an alert asking the user to enter a valid crypto pair.")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"b-clear-button-event-listener"},"b. Clear Button Event Listener"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"document.getElementById('clearBtn').addEventListener('click', () => {\n  output.innerHTML = ''; // Clear all content in the output div\n  if (socket) {\n    socket.close(); // Close the WebSocket connection\n    socket = null; // Reset the socket variable\n  }\n});\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'On clicking the "Clear & Close" button, it:',(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Clears the content inside the output area."),(0,o.kt)("li",{parentName:"ul"},"Closes the WebSocket connection (if open) and resets the ",(0,o.kt)("inlineCode",{parentName:"li"},"socket")," variable to ",(0,o.kt)("inlineCode",{parentName:"li"},"null"),".")))),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"This project showcases how to stream live cryptocurrency prices using WebSocket connections from Binance. It provides an\neasy way to manage connections\u2014allowing users to enter a crypto pair, view real-time updates, and close the connection anytime."),(0,o.kt)("div",{style:{position:"relative",paddingBottom:"calc(46.33333333333333% + 41px)",height:0}},(0,o.kt)("iframe",{src:"https://demoapp.dronahq.io/NMIn7GBmu5odO4JqE5GosfN7gN4MMggO33p8guILO9boU?type=emd",title:"Add to Git",frameborder:"0",loading:"lazy",webkitallowfullscreen:!0,mozallowfullscreen:!0,allowfullscreen:!0,style:{position:"absolute",top:0,left:0,width:"100%",height:"100%",colorScheme:"light"}})),(0,o.kt)("p",null,"This example serves as an excellent starting point for building more complex trading applications or dashboards."))}b.isMDXComponent=!0}}]);