"use strict";(self.webpackChunkdronahq_docs=self.webpackChunkdronahq_docs||[]).push([[44658],{27964:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>k,frontMatter:()=>o,metadata:()=>p,toc:()=>m});n(67294);var a=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const o={description:"FileUtility methods to perform actions from JS code.",title:"File Utility Methods",sidebar_position:50},s="File Utility Methods",p={unversionedId:"reference/keywords-js-utilities/FileUtility",id:"reference/keywords-js-utilities/FileUtility",title:"File Utility Methods",description:"FileUtility methods to perform actions from JS code.",source:"@site/docs/reference/keywords-js-utilities/FileUtility.md",sourceDirName:"reference/keywords-js-utilities",slug:"/reference/keywords-js-utilities/FileUtility",permalink:"/reference/keywords-js-utilities/FileUtility",draft:!1,tags:[],version:"current",lastUpdatedAt:1715247372,formattedLastUpdatedAt:"May 9, 2024",sidebarPosition:50,frontMatter:{description:"FileUtility methods to perform actions from JS code.",title:"File Utility Methods",sidebar_position:50},sidebar:"docSidebar",previous:{title:"Utility Methods",permalink:"/reference/keywords-js-utilities/Utility"},next:{title:"Helper Methods",permalink:"/reference/keywords-js-utilities/Helper"}},d={},m=[{value:"FILEPARSER",id:"fileparser",level:2},{value:"PARSEXLSX",id:"parsexlsx",level:2},{value:"DOWNLOADFILEAS",id:"downloadfileas",level:2}],u={toc:m},c="wrapper";function k(e){var{components:t}=e,n=i(e,["components"]);return(0,a.kt)(c,l(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"file-utility-methods"},"File Utility Methods"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"FILEUTILITY")," contains methods which are helpful for parsing data from file formats like CSV and JSON. These methods return the parsed data in JSON format which is suitable to be used with controls on the UI builder."),(0,a.kt)("h2",{id:"fileparser"},"FILEPARSER"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"FILEUTILITY.FILEPARSER")," method can be used to parse files of multiple different formats and get output into JSON format. This method returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise"),". The accepted file formats include ",(0,a.kt)("inlineCode",{parentName:"p"},"csv")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"xml")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"json"),"."),(0,a.kt)("span",{style:{fontSize:24}},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Accepts"),(0,a.kt)("th",{parentName:"tr",align:null},"Possible values"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"url")),(0,a.kt)("td",{parentName:"tr",align:null},"String"),(0,a.kt)("td",{parentName:"tr",align:null},"any valid url for csv, json or xml file")))),(0,a.kt)("span",{style:{fontSize:24}},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"FILEUTILITY.FILEPARSER(url);\n")),(0,a.kt)("span",{style:{fontSize:24}},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'await FILEUTILITY.FILEPARSER("https://dronamobilepublic.s3.amazonaws.com/DRONA5_Team19020/content/app/images/UiFhDLxjT5.csv");\n')),(0,a.kt)("h2",{id:"parsexlsx"},"PARSEXLSX"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"FILEUTILITY.PARSEXLSX")," method can be used to parse excel sheets and get output into JSON format. This method returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise"),". The accepted file format is ",(0,a.kt)("inlineCode",{parentName:"p"},"xlsx"),". The second parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"sheetNumber")," is optional. If your excel file has multiple sheets, you can specify the sheet number which you want to parse. By default the utility will parse the first sheet."),(0,a.kt)("span",{style:{fontSize:24}},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"FILEUTILITY.PARSEXLSX(url,sheetNumber);\n")),(0,a.kt)("span",{style:{fontSize:24}},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Accepts"),(0,a.kt)("th",{parentName:"tr",align:null},"Possible values"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"url")),(0,a.kt)("td",{parentName:"tr",align:null},"String"),(0,a.kt)("td",{parentName:"tr",align:null},"any valid url for xlsx file")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"sheetNumber")," (Optional)"),(0,a.kt)("td",{parentName:"tr",align:null},"Number"),(0,a.kt)("td",{parentName:"tr",align:null},"any numerical value")))),(0,a.kt)("span",{style:{fontSize:24}},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"await FILEUTILITY.PARSEXLSX('https://dronamobilepublic.s3.amazonaws.com/DRONA5_Team19020/content/app/images/WKEa5OPsEw.xlsx');\n")),(0,a.kt)("h2",{id:"downloadfileas"},"DOWNLOADFILEAS"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"FILEUTILITY.DOWNLOADFILEAS")," method can be used to download json data into different file formats. The supported file formats are ",(0,a.kt)("inlineCode",{parentName:"p"},"json"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"csv")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"xml"),"."),(0,a.kt)("span",{style:{fontSize:24}},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"FILEUTILITY.DOWNLOADFILEAS(data,format);\n")),(0,a.kt)("span",{style:{fontSize:24}},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Accepts"),(0,a.kt)("th",{parentName:"tr",align:null},"Possible values"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"data")),(0,a.kt)("td",{parentName:"tr",align:null},"Json array"),(0,a.kt)("td",{parentName:"tr",align:null},"array of json objects")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"format")),(0,a.kt)("td",{parentName:"tr",align:null},"String"),(0,a.kt)("td",{parentName:"tr",align:null},"'json','csv','xml'")))),(0,a.kt)("span",{style:{fontSize:24}},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"FILEUTILITY.DOWNLOADFILEAS(data,'csv');\n")))}k.isMDXComponent=!0}}]);